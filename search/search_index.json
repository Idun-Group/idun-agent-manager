{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Idun Agent Platform","text":"<p>Build, deploy, and operate AI agents with a unified API, production-grade runtime, and first-class docs.</p> <p>Use these docs to get started quickly, understand the architecture, and explore the Python Engine API.</p>"},{"location":"#quick-links","title":"Quick links","text":"<ul> <li>Getting Started: see Getting Started</li> <li>Architecture overview: see Architecture</li> <li>Examples: see Examples</li> <li>API reference: see API Reference</li> </ul>"},{"location":"#what-is-idun","title":"What is Idun?","text":"<p>Idun is a modular platform composed of:</p> <ul> <li>Idun Agent Engine: Python library that wraps agent frameworks behind a FastAPI server with unified endpoints and observability.</li> <li>Idun Agent Manager: Service that packages agent code, builds images, and deploys them to Docker, Cloud Run, or Kubernetes.</li> <li>Idun Agent Gateway: HTTP gateway that routes requests to agent instances by Agent ID.</li> <li>Idun Agent UI: Next.js application to manage and interact with agents.</li> </ul> <p>See the repo <code>README.md</code> for a high-level overview and roadmap.</p>"},{"location":"adk_agent_guide/","title":"ADK Agent Implementation Guide","text":"<p>This guide explains how to use the Google Agent Development Kit (ADK) implementation in the Idun Agent Manager.</p>"},{"location":"adk_agent_guide/#overview","title":"Overview","text":"<p>The ADK agent implementation provides a streaming-enabled interface for Google's Agent Development Kit, similar to the LangGraph implementation. It converts ADK events into ag-ui compatible events for seamless integration with the existing infrastructure.</p>"},{"location":"adk_agent_guide/#features","title":"Features","text":"<ul> <li>\u2705 Streaming Support: Real-time event streaming with ag-ui event types</li> <li>\u2705 Tool Integration: Support for custom tools and ADK built-in tools</li> <li>\u2705 Session Management: Memory and state management across conversations</li> <li>\u2705 Event Conversion: Automatic conversion from ADK events to ag-ui events</li> <li>\u2705 Error Handling: Robust error handling and cleanup</li> <li>\u2705 Configuration: Flexible configuration options</li> </ul>"},{"location":"adk_agent_guide/#quick-start","title":"Quick Start","text":""},{"location":"adk_agent_guide/#1-install-dependencies","title":"1. Install Dependencies","text":"<pre><code>pip install google-adk\n</code></pre>"},{"location":"adk_agent_guide/#2-create-an-adk-agent-configuration","title":"2. Create an ADK Agent Configuration","text":"<pre><code># Example configuration for an ADK agent\nagent_config = {\n    \"name\": \"WeatherAgent\",\n    \"model\": \"gemini-2.0-flash\",\n    \"description\": \"An agent that provides weather information\",\n    \"instruction\": \"You are a helpful weather assistant...\",\n    \"tools\": [get_weather_function]  # List of tool functions\n}\n</code></pre>"},{"location":"adk_agent_guide/#3-initialize-and-use-the-agent","title":"3. Initialize and Use the Agent","text":"<pre><code>from idun_agent_manager.core.agents.adk_agent_impl import ADKAgent\n\n# Create the agent\nagent = ADKAgent()\n\n# Initialize with configuration\nawait agent.initialize(agent_config)\n\n# Process a message\nmessage = {\n    \"query\": \"What's the weather like in Paris?\",\n    \"session_id\": \"user123\"\n}\n\nresponse = await agent.process_message(message)\nprint(response)\n</code></pre>"},{"location":"adk_agent_guide/#4-streaming-messages","title":"4. Streaming Messages","text":"<pre><code># Stream events for real-time responses\nasync for event in agent.process_message_stream(message):\n    print(f\"Event: {event.type}\")\n    if hasattr(event, 'delta'):\n        print(f\"Content: {event.delta}\")\n</code></pre>"},{"location":"adk_agent_guide/#configuration-options","title":"Configuration Options","text":""},{"location":"adk_agent_guide/#basic-configuration","title":"Basic Configuration","text":"<pre><code>{\n    \"name\": \"AgentName\",           # Required: Agent identifier\n    \"model\": \"gemini-2.0-flash\",   # Required: Model to use\n    \"description\": \"...\",          # Agent description\n    \"instruction\": \"...\",          # System prompt/instructions\n    \"tools\": [...]                 # List of tool functions\n}\n</code></pre>"},{"location":"adk_agent_guide/#tool-configuration","title":"Tool Configuration","text":"<p>Tools can be provided as:</p> <ol> <li> <p>Function objects (recommended for simple tools): <pre><code>def get_weather(location: str) -&gt; str:\n    \"\"\"Get weather for a location.\"\"\"\n    return f\"Weather in {location}: Sunny, 22\u00b0C\"\n\nconfig = {\n    \"tools\": [get_weather]\n}\n</code></pre></p> </li> <li> <p>Module paths (for complex tools): <pre><code>config = {\n    \"tools\": [\"path/to/tools.py:weather_tool\"]\n}\n</code></pre></p> </li> </ol>"},{"location":"adk_agent_guide/#event-types","title":"Event Types","text":"<p>The ADK implementation converts ADK events to the following ag-ui event types:</p> <ul> <li><code>RUN_STARTED</code> - When agent processing begins</li> <li><code>RUN_FINISHED</code> - When agent processing completes</li> <li><code>TEXT_MESSAGE_START</code> - Start of text message</li> <li><code>TEXT_MESSAGE_CONTENT</code> - Text content chunk</li> <li><code>TEXT_MESSAGE_END</code> - End of text message</li> <li><code>TOOL_CALL_START</code> - Tool execution begins</li> <li><code>TOOL_CALL_ARGS</code> - Tool arguments</li> <li><code>TOOL_CALL_END</code> - Tool execution completes</li> <li><code>THINKING_START</code> - Agent reasoning begins</li> <li><code>THINKING_END</code> - Agent reasoning completes</li> <li><code>STEP_STARTED</code> - Processing step begins</li> <li><code>STEP_FINISHED</code> - Processing step completes</li> </ul>"},{"location":"adk_agent_guide/#example-weather-agent","title":"Example: Weather Agent","text":"<p>Here's a complete example of a weather agent:</p> <pre><code># tools.py\ndef get_weather(location: str) -&gt; str:\n    \"\"\"\n    Get the current weather for a location.\n\n    Args:\n        location: The city or location to get weather for\n\n    Returns:\n        A weather description string\n    \"\"\"\n    weather_data = {\n        \"paris\": \"Sunny, 22\u00b0C\",\n        \"london\": \"Cloudy, 15\u00b0C\",\n        \"new york\": \"Rainy, 18\u00b0C\",\n        \"tokyo\": \"Clear, 25\u00b0C\",\n    }\n\n    location_lower = location.lower()\n    if location_lower in weather_data:\n        return f\"Weather in {location}: {weather_data[location_lower]}\"\n    else:\n        return f\"Weather data not available for {location}\"\n\n# agent_config.py\nWEATHER_AGENT_CONFIG = {\n    \"name\": \"WeatherAgent\",\n    \"model\": \"gemini-2.0-flash\",\n    \"description\": \"Provides weather information for cities\",\n    \"instruction\": \"\"\"You are a helpful weather assistant.\n    When users ask about weather, use the get_weather tool to provide accurate information.\n    Be friendly and conversational in your responses.\"\"\",\n    \"tools\": [get_weather]\n}\n\n# main.py\nimport asyncio\nfrom idun_agent_manager.core.agents.adk_agent_impl import ADKAgent\n\nasync def main():\n    # Create and initialize agent\n    agent = ADKAgent()\n    await agent.initialize(WEATHER_AGENT_CONFIG)\n\n    # Test the agent\n    message = {\n        \"query\": \"What's the weather like in Tokyo?\",\n        \"session_id\": \"demo_session\"\n    }\n\n    # Get response\n    response = await agent.process_message(message)\n    print(f\"Response: {response}\")\n\n    # Stream events\n    print(\"\\nStreaming events:\")\n    async for event in agent.process_message_stream(message):\n        print(f\"\ud83d\udce1 {event.type}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"adk_agent_guide/#adk-vs-langgraph","title":"ADK vs LangGraph","text":"Feature ADK Agent LangGraph Agent Event System ADK Events \u2192 ag-ui events LangGraph Events \u2192 ag-ui events Tool Support Python functions + ADK tools Python functions + LangGraph tools Session Management ADK Session Service LangGraph Checkpointer Streaming \u2705 Full support \u2705 Full support State Management ADK built-in LangGraph StateGraph Model Support Gemini (primary), others via LiteLLM Any model supported by LangGraph"},{"location":"adk_agent_guide/#session-management","title":"Session Management","text":""},{"location":"adk_agent_guide/#creating-sessions","title":"Creating Sessions","text":"<pre><code># Get or create a session\nsession = agent.get_session(\"user123\")\n\n# Access session memory\nmemory = agent.get_memory(\"user123\")\n</code></pre>"},{"location":"adk_agent_guide/#session-state","title":"Session State","text":"<p>Sessions automatically maintain conversation history and state across messages when using the same <code>session_id</code>.</p>"},{"location":"adk_agent_guide/#error-handling","title":"Error Handling","text":"<p>The implementation includes comprehensive error handling:</p> <pre><code>try:\n    response = await agent.process_message(message)\nexcept RuntimeError as e:\n    print(f\"Agent error: {e}\")\nexcept ValueError as e:\n    print(f\"Configuration error: {e}\")\n</code></pre>"},{"location":"adk_agent_guide/#best-practices","title":"Best Practices","text":"<ol> <li>Tool Documentation: Provide clear docstrings for all tools</li> <li>Error Handling: Always wrap agent calls in try-catch blocks</li> <li>Session IDs: Use consistent session IDs for conversation continuity</li> <li>Resource Cleanup: Ensure proper cleanup in production environments</li> <li>Configuration Validation: Validate configuration before initialization</li> </ol>"},{"location":"adk_agent_guide/#testing","title":"Testing","text":"<p>Run the ADK agent tests:</p> <pre><code>cd tests\npython test_adk_agent_creation.py\n</code></pre> <p>The test suite includes: - Basic agent creation and initialization - Message processing - Streaming functionality - Tool execution - Session management</p>"},{"location":"adk_agent_guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"adk_agent_guide/#common-issues","title":"Common Issues","text":"<ol> <li> <p>ImportError: Make sure <code>google-adk</code> is installed    <pre><code>pip install google-adk\n</code></pre></p> </li> <li> <p>Authentication: Set up Google Cloud credentials    <pre><code>gcloud auth application-default login\n</code></pre></p> </li> <li> <p>Model Access: Ensure you have access to the specified Gemini model</p> </li> <li> <p>Tool Errors: Verify tool functions have proper type hints and docstrings</p> </li> </ol>"},{"location":"adk_agent_guide/#debug-mode","title":"Debug Mode","text":"<p>Enable verbose logging to see detailed event flow:</p> <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre>"},{"location":"adk_agent_guide/#additional-resources","title":"Additional Resources","text":"<ul> <li>Google ADK Documentation</li> <li>ADK Events Guide</li> <li>ADK Runtime Documentation</li> <li>Example ADK Agents</li> </ul>"},{"location":"adk_agent_guide/#contributing","title":"Contributing","text":"<p>To contribute to the ADK implementation:</p> <ol> <li>Follow the existing code patterns</li> <li>Add comprehensive tests</li> <li>Update this documentation</li> <li>Ensure compatibility with ag-ui events</li> </ol>"},{"location":"adk_agent_guide/#support","title":"Support","text":"<p>For issues specific to the ADK implementation, check: 1. This documentation 2. The test files for examples 3. Google ADK documentation for ADK-specific questions</p>"},{"location":"architecture/","title":"Architecture","text":"<pre><code>graph TD\n  subgraph Client Apps\n    U[Next.js UI]\n    S[SDK/HTTP Clients]\n  end\n\n  subgraph Control Plane\n    M[Idun Agent Manager - FastAPI service]\n    G[Idun Agent Gateway - Traefik]\n    A[PostgreSQL Configs + Metadata]\n    R[Artifact Registry Container Images]\n  end\n\n  subgraph Data Plane\n    E[Idun Agent Engine Runtime - FastAPI per Agent]\n    O[Observability Langfuse / Phoenix]\n    C[Checkpoints SQLite -&gt; Postgres]\n  end\n\n  U --&gt;|Manage &amp; Chat| M\n  S --&gt;|Invoke/Stream| G\n  M --&gt;|CRUD Agents| A\n  M --&gt;|Build &amp; Push| R\n  M --&gt;|Deploy| E\n  G --&gt;|Route by Agent ID| E\n  E --&gt; O\n  E --&gt; C\n</code></pre> <p>The Engine exposes a unified API, enabling interchangeable agent frameworks while preserving operational concerns like health checks and observability.</p>"},{"location":"contributing-docs/","title":"Contributing to the Documentation","text":"<p>We use MkDocs with the Material theme and mkdocstrings to auto-generate API docs.</p>"},{"location":"contributing-docs/#quick-start","title":"Quick start","text":"<pre><code>poetry install --with dev\nmake docs-serve\n</code></pre> <p>Visit http://localhost:8001 to preview changes.</p>"},{"location":"contributing-docs/#structure","title":"Structure","text":"<ul> <li>Top-level pages live under <code>docs/</code> and are linked in <code>mkdocs.yml</code> <code>nav</code>.</li> <li>API reference is generated from <code>libs/idun_agent_engine/src/idun_agent_engine/**</code> via <code>docs/gen_api_reference.py</code>.</li> </ul>"},{"location":"contributing-docs/#authoring-guidelines","title":"Authoring guidelines","text":"<ul> <li>Prefer short sections and examples over long prose.</li> <li>Use fenced code blocks with language annotations.</li> <li>Link across pages using relative links and headings; <code>autorefs</code> resolves them.</li> <li>Keep repository <code>README.md</code> high-level; put detailed guides in <code>docs/</code>.</li> </ul>"},{"location":"contributing-docs/#publishing","title":"Publishing","text":"<p>Docs are built on pushes to <code>main</code> and deployed to GitHub Pages automatically. To deploy manually:</p> <pre><code>make docs-deploy\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<p>Run the sample agents from the repo to see the unified API in action.</p>"},{"location":"examples/#adk-agent","title":"ADK Agent","text":"<pre><code>cd tests\npython test_adk_agent_creation.py\n</code></pre>"},{"location":"examples/#smolagent","title":"SmolAgent","text":"<pre><code>cd tests\npython test_smol_agent_creation.py\n</code></pre>"},{"location":"examples/#langgraph-agent","title":"LangGraph Agent","text":"<pre><code>cd tests\npython test_langgraph_agent_creation.py\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide helps you run the Engine locally and explore the unified API.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.13</li> <li>Docker (optional)</li> </ul>"},{"location":"getting-started/#install-the-engine","title":"Install the Engine","text":"<pre><code>pip install idun-agent-engine\n</code></pre>"},{"location":"getting-started/#minimal-config","title":"Minimal config","text":"<pre><code>server:\n  api:\n    port: 8000\n\nagent:\n  type: \"langgraph\"\n  config:\n    name: \"My Example LangGraph Agent\"\n    graph_definition: \"./examples/01_basic_config_file/example_agent.py:app\"\n    checkpointer:\n      type: \"sqlite\"\n      db_url: \"sqlite:///example_checkpoint.db\"\n</code></pre>"},{"location":"getting-started/#run-the-server","title":"Run the server","text":"<pre><code>from idun_agent_engine.core.server_runner import run_server_from_config\n\nrun_server_from_config(\"config.yaml\")\n</code></pre>"},{"location":"getting-started/#try-the-api","title":"Try the API","text":"<pre><code>curl -X POST \"http://localhost:8000/agent/invoke\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"query\": \"Hello!\", \"session_id\": \"user-123\"}'\n</code></pre>"},{"location":"smol_agent_guide/","title":"SmolAgent Implementation Guide","text":"<p>This guide explains how to use the <code>smolagents</code> implementation in the Idun Agent Manager.</p>"},{"location":"smol_agent_guide/#overview","title":"Overview","text":"<p>The <code>SmolAgent</code> implementation wraps the <code>CodeAgent</code> from Hugging Face's <code>smolagents</code> library, providing a powerful, code-centric agent that integrates seamlessly with the Idun Agent Manager. It translates the synchronous, code-based event stream from <code>smolagents</code> into the asynchronous, UI-compatible event stream used by the manager.</p>"},{"location":"smol_agent_guide/#features","title":"Features","text":"<ul> <li>\u2705 Code-First Agents: Leverages agents that think and act in Python code.</li> <li>\u2705 Streaming Support: Translates <code>smolagents</code>'s synchronous generator into a fully asynchronous stream of <code>ag-ui</code> events.</li> <li>\u2705 Flexible Model Backends: Supports various model providers through <code>smolagents</code>, including Hugging Face Inference, LiteLLM, OpenAI, and more.</li> <li>\u2705 Built-in Tools: Easily configure pre-built tools like <code>WebSearchTool</code>.</li> </ul>"},{"location":"smol_agent_guide/#quick-start","title":"Quick Start","text":""},{"location":"smol_agent_guide/#1-install-dependencies","title":"1. Install Dependencies","text":"<pre><code>pip install smolagents\npip install tavily-python  # For WebSearchTool\n</code></pre>"},{"location":"smol_agent_guide/#2-set-environment-variables","title":"2. Set Environment Variables","text":"<p>The <code>WebSearchTool</code> (and many other tools) requires an API key.</p> <p><pre><code>export TAVILY_API_KEY=\"your-tavily-api-key\"\n</code></pre> You may also need a Hugging Face token for certain models. <pre><code>export HF_TOKEN=\"your-hugging-face-token\"\n</code></pre></p>"},{"location":"smol_agent_guide/#3-create-a-smolagent-configuration","title":"3. Create a SmolAgent Configuration","text":"<p>Define your agent in a Python dictionary. This includes the model and tools you want to use.</p> <pre><code># Example configuration for a SmolAgent\nagent_config = {\n    \"name\": \"WebSearchAgent\",\n    \"model_config\": {\n        \"type\": \"InferenceClientModel\",\n        \"model_id\": \"HuggingFaceH4/zephyr-7b-beta\",\n    },\n    \"tools_config\": [\n        \"WebSearchTool\"\n    ]\n}\n</code></pre>"},{"location":"smol_agent_guide/#4-initialize-and-use-the-agent","title":"4. Initialize and Use the Agent","text":"<pre><code>from idun_agent_manager.core.agents.smol_agent_impl import SmolAgent\n\n# Create the agent\nagent = SmolAgent()\n\n# Initialize with configuration\nawait agent.initialize(agent_config)\n\n# Process a message via streaming\nmessage = {\n    \"query\": \"What are the latest developments in AI agents?\",\n    \"session_id\": \"user456\"\n}\n\nasync for event in agent.process_message_stream(message):\n    print(f\"Event: {event.type}\")\n    if hasattr(event, 'delta'):\n        print(f\"Content: {event.delta}\")\n</code></pre>"},{"location":"smol_agent_guide/#configuration-options","title":"Configuration Options","text":"<p>The configuration is split into two main sections: <code>model_config</code> and <code>tools_config</code>.</p>"},{"location":"smol_agent_guide/#model_config","title":"<code>model_config</code>","text":"<p>Specify the model backend and its parameters. The <code>type</code> key determines which <code>smolagents</code> model class to use.</p> <p>Hugging Face (Free Tier): <pre><code>\"model_config\": {\n    \"type\": \"InferenceClientModel\",\n    \"model_id\": \"HuggingFaceH4/zephyr-7b-beta\"\n}\n</code></pre></p> <p>LiteLLM (e.g., with local Ollama): <pre><code>\"model_config\": {\n    \"type\": \"LiteLLMModel\",\n    \"model_id\": \"ollama/llama3\",\n    \"api_base\": \"http://localhost:11434\"\n}\n</code></pre></p> <p>OpenAI: <pre><code>\"model_config\": {\n    \"type\": \"OpenAIServerModel\",\n    \"model_id\": \"gpt-4o\",\n    \"api_key\": \"your-openai-key\"\n}\n</code></pre></p> <p>Supported types: <code>InferenceClientModel</code>, <code>LiteLLMModel</code>, <code>OpenAIServerModel</code>, <code>AzureOpenAIServerModel</code>, <code>AmazonBedrockServerModel</code>, <code>TransformersModel</code>.</p>"},{"location":"smol_agent_guide/#tools_config","title":"<code>tools_config</code>","text":"<p>A list of strings specifying which pre-built tools to load.</p> <p><pre><code>\"tools_config\": [\n    \"WebSearchTool\"\n    # Add other tool names here\n]\n</code></pre> Currently, only <code>WebSearchTool</code> is mapped. To add more, extend the <code>initialize</code> method in <code>smol_agent_impl.py</code>.</p>"},{"location":"smol_agent_guide/#event-mapping","title":"Event Mapping","text":"<p>The <code>SmolAgent</code> implementation maps <code>smolagents</code> event types to <code>ag-ui</code> events as follows:</p> <code>smolagents</code> type <code>ag-ui</code> Event(s) Description <code>thought</code> <code>ThinkingStart</code> / <code>ThinkingEnd</code> Captures the agent's reasoning steps. <code>tool_code</code> <code>ToolCallStart</code> / <code>ToolCallArgs</code> The Python code the agent is about to execute. <code>tool_output</code> <code>ToolCallEnd</code> / <code>TextMessageContent</code> The result from the code execution. <code>answer</code> <code>TextMessageContent</code> The final, user-facing answer."},{"location":"smol_agent_guide/#session-management","title":"Session Management","text":"<p><code>smolagents</code> handles memory and state internally for the duration of a single <code>.run()</code> call. This implementation does not persist state across multiple <code>process_message</code> or <code>process_message_stream</code> calls. Each query starts a new, independent run.</p>"},{"location":"smol_agent_guide/#testing","title":"Testing","text":"<p>To verify your setup and the agent's functionality, run the dedicated test script. Make sure you have the required environment variables set.</p> <pre><code>cd tests\npython test_smol_agent_creation.py\n</code></pre> <p>The test suite covers: - Agent initialization with a Hugging Face model. - A full streaming run using the <code>WebSearchTool</code>.</p>"},{"location":"smol_agent_guide/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>ImportError: Ensure <code>smolagents</code> is installed (<code>pip install smolagents</code>).</li> <li>API Key Errors: Make sure the necessary environment variables (e.g., <code>TAVILY_API_KEY</code>, <code>HF_TOKEN</code>, <code>OPENAI_API_KEY</code>) are set correctly in your environment.</li> <li>Model Not Found: Double-check the <code>model_id</code> and ensure you have access to it. For local models like Ollama, ensure the service is running.</li> <li>Permissions: If using a gated model from Hugging Face, ensure your <code>HF_TOKEN</code> has the required permissions.</li> </ul>"},{"location":"smol_agent_guide/#additional-resources","title":"Additional Resources","text":"<ul> <li>Official <code>smolagents</code> Repository</li> <li>Official <code>smolagents</code> Documentation</li> </ul>"},{"location":"reference/","title":"API Reference","text":"<p>The API reference is generated automatically from the source code using <code>mkdocstrings</code>.</p> <p>Generated modules:</p> <ul> <li>idun_agent_engine</li> </ul> <p>Use the left navigation to browse submodules and objects.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>idun_agent_engine._version</li> <li>idun_agent_engine</li> <li>idun_agent_engine.observability.utils</li> <li>idun_agent_engine.observability.model</li> <li>idun_agent_engine.observability</li> <li>idun_agent_engine.observability.base</li> <li>idun_agent_engine.core.config_builder</li> <li>idun_agent_engine.core.server_runner</li> <li>idun_agent_engine.core.engine_config</li> <li>idun_agent_engine.core.app_factory</li> <li>idun_agent_engine.core</li> <li>idun_agent_engine.server.lifespan</li> <li>idun_agent_engine.server.dependencies</li> <li>idun_agent_engine.server.server_config</li> <li>idun_agent_engine.server</li> <li>idun_agent_engine.agent.model</li> <li>idun_agent_engine.agent</li> <li>idun_agent_engine.agent.base</li> <li>idun_agent_engine.cli</li> <li>idun_agent_engine.agent.langgraph.langgraph_model</li> <li>idun_agent_engine.agent.langgraph.langgraph</li> <li>idun_agent_engine.agent.langgraph</li> <li>idun_agent_engine.agent.crewai.crewai</li> <li>idun_agent_engine.agent.crewai</li> <li>idun_agent_engine.server.routers.agent</li> <li>idun_agent_engine.server.routers</li> <li>idun_agent_engine.server.routers.base</li> <li>idun_agent_engine.observability.langfuse.langfuse_handler</li> <li>idun_agent_engine.observability.langfuse</li> <li>idun_agent_engine.observability.phoenix.phoenix_handler</li> <li>idun_agent_engine.observability.phoenix</li> </ul>"},{"location":"reference/idun_agent_engine/","title":"idun_agent_engine","text":""},{"location":"reference/idun_agent_engine/#idun_agent_engine","title":"<code>idun_agent_engine</code>","text":"<p>Idun Agent Engine public API.</p> <p>Exports top-level helpers for convenience imports in examples and user code.</p>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.BaseAgent","title":"<code>BaseAgent</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base for agents pluggable into the Idun Agent Engine.</p> <p>Implements the public protocol that concrete agent adapters must follow.</p>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.BaseAgent.agent_instance","title":"<code>agent_instance: Any</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Get the underlying agent instance from the specific framework.</p> <p>This might be set after initialization.</p>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.BaseAgent.agent_type","title":"<code>agent_type: str</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Type or category of the agent (e.g., 'LangGraph', 'ADK').</p>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.BaseAgent.configuration","title":"<code>configuration: ConfigType</code>  <code>property</code>","text":"<p>Return current configuration settings for the agent.</p> <p>This is typically the configuration used during initialization.</p>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.BaseAgent.id","title":"<code>id: str</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Unique identifier for the agent instance.</p>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.BaseAgent.infos","title":"<code>infos: dict[str, Any]</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>General information about the agent instance (e.g., version, status, metadata).</p>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.BaseAgent.initialize","title":"<code>initialize(config: dict[str, Any]) -&gt; None</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Initialize the agent with a given configuration.</p> <p>This method should set up the underlying agent framework instance.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict[str, Any]</code> <p>A dictionary containing the agent's configuration.</p> required Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/base.py</code> <pre><code>@abstractmethod\nasync def initialize(self, config: dict[str, Any]) -&gt; None:\n    \"\"\"Initialize the agent with a given configuration.\n\n    This method should set up the underlying agent framework instance.\n\n    Args:\n        config: A dictionary containing the agent's configuration.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.BaseAgent.invoke","title":"<code>invoke(message: Any) -&gt; Any</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Process a single input message and return a response.</p> <p>This should be an awaitable method if the underlying agent processes asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Any</code> <p>The input message for the agent.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The agent's response.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/base.py</code> <pre><code>@abstractmethod\nasync def invoke(self, message: Any) -&gt; Any:\n    \"\"\"Process a single input message and return a response.\n\n    This should be an awaitable method if the underlying agent processes\n    asynchronously.\n\n    Args:\n        message: The input message for the agent.\n\n    Returns:\n        The agent's response.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.BaseAgent.stream","title":"<code>stream(message: Any) -&gt; AsyncGenerator[Any]</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Process a single input message and return an asynchronous stream.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Any</code> <p>The input message for the agent.</p> required <p>Yields:</p> Type Description <code>AsyncGenerator[Any]</code> <p>Chunks of the agent's response.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/base.py</code> <pre><code>@abstractmethod\nasync def stream(self, message: Any) -&gt; AsyncGenerator[Any]:\n    \"\"\"Process a single input message and return an asynchronous stream.\n\n    Args:\n        message: The input message for the agent.\n\n    Yields:\n        Chunks of the agent's response.\n    \"\"\"\n    # This is an async generator, so it needs `async def` and `yield`\n    # For the ABC, we can't have a `yield` directly in the abstract method body.\n    # The signature itself defines it as an async generator.\n    # Example: async for chunk in agent.stream(message): ...\n    if False:  # pragma: no cover (This is just to make it a generator type for static analysis)\n        yield\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.ConfigBuilder","title":"<code>ConfigBuilder()</code>","text":"<p>A fluent builder for creating Idun Agent Engine configurations using Pydantic models.</p> <p>This class provides a convenient way to build strongly-typed configuration objects that are validated at creation time, ensuring consistency and catching errors early. It also handles agent initialization and management.</p> Example <p>config = (ConfigBuilder()          .with_api_port(8080)          .with_langgraph_agent(              name=\"My Agent\",              graph_definition=\"my_agent.py:graph\",              sqlite_checkpointer=\"agent.db\")          .build())</p> <p>app = create_app(config_dict=config.model_dump())</p> <p>Initialize a new configuration builder with default values.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>def __init__(self):\n    \"\"\"Initialize a new configuration builder with default values.\"\"\"\n    self._server_config = ServerConfig()\n    self._agent_config: AgentConfig | None = None\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.ConfigBuilder.build","title":"<code>build() -&gt; EngineConfig</code>","text":"<p>Build and return the complete configuration as a validated Pydantic model.</p> <p>Returns:</p> Name Type Description <code>EngineConfig</code> <code>EngineConfig</code> <p>The complete, validated configuration object</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the configuration is incomplete or invalid</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>def build(self) -&gt; EngineConfig:\n    \"\"\"Build and return the complete configuration as a validated Pydantic model.\n\n    Returns:\n        EngineConfig: The complete, validated configuration object\n\n    Raises:\n        ValueError: If the configuration is incomplete or invalid\n    \"\"\"\n    if not self._agent_config:\n        raise ValueError(\n            \"Agent configuration is required. Use with_langgraph_agent() or with_custom_agent()\"\n        )\n\n    # Create and validate the complete configuration\n    return EngineConfig(server=self._server_config, agent=self._agent_config)\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.ConfigBuilder.build_and_initialize_agent","title":"<code>build_and_initialize_agent() -&gt; BaseAgent</code>  <code>async</code>","text":"<p>Build configuration and initialize the agent in one step.</p> <p>Returns:</p> Name Type Description <code>BaseAgent</code> <code>BaseAgent</code> <p>Initialized agent instance</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If agent type is unsupported or configuration is invalid</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>async def build_and_initialize_agent(self) -&gt; BaseAgent:\n    \"\"\"Build configuration and initialize the agent in one step.\n\n    Returns:\n        BaseAgent: Initialized agent instance\n\n    Raises:\n        ValueError: If agent type is unsupported or configuration is invalid\n    \"\"\"\n    engine_config = self.build()\n    return await self.initialize_agent_from_config(engine_config)\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.ConfigBuilder.build_dict","title":"<code>build_dict() -&gt; dict[str, Any]</code>","text":"<p>Build and return the configuration as a dictionary.</p> <p>This is a convenience method for backward compatibility.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dict[str, Any]: The complete configuration dictionary</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>def build_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Build and return the configuration as a dictionary.\n\n    This is a convenience method for backward compatibility.\n\n    Returns:\n        Dict[str, Any]: The complete configuration dictionary\n    \"\"\"\n    engine_config = self.build()\n    return engine_config.model_dump()\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.ConfigBuilder.from_dict","title":"<code>from_dict(config_dict: dict[str, Any]) -&gt; ConfigBuilder</code>  <code>classmethod</code>","text":"<p>Create a ConfigBuilder from an existing configuration dictionary.</p> <p>This method validates the input dictionary against the Pydantic models.</p> <p>Parameters:</p> Name Type Description Default <code>config_dict</code> <code>dict[str, Any]</code> <p>Existing configuration dictionary</p> required <p>Returns:</p> Name Type Description <code>ConfigBuilder</code> <code>ConfigBuilder</code> <p>A new builder instance with the provided configuration</p> <p>Raises:</p> Type Description <code>ValidationError</code> <p>If the configuration dictionary is invalid</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>@classmethod\ndef from_dict(cls, config_dict: dict[str, Any]) -&gt; \"ConfigBuilder\":\n    \"\"\"Create a ConfigBuilder from an existing configuration dictionary.\n\n    This method validates the input dictionary against the Pydantic models.\n\n    Args:\n        config_dict: Existing configuration dictionary\n\n    Returns:\n        ConfigBuilder: A new builder instance with the provided configuration\n\n    Raises:\n        ValidationError: If the configuration dictionary is invalid\n    \"\"\"\n    # Validate the entire config first\n    engine_config = EngineConfig.model_validate(config_dict)\n\n    # Create a new builder\n    builder = cls()\n    builder._server_config = engine_config.server\n    builder._agent_config = engine_config.agent\n\n    return builder\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.ConfigBuilder.from_engine_config","title":"<code>from_engine_config(engine_config: EngineConfig) -&gt; ConfigBuilder</code>  <code>classmethod</code>","text":"<p>Create a ConfigBuilder from an existing EngineConfig instance.</p> <p>Parameters:</p> Name Type Description Default <code>engine_config</code> <code>EngineConfig</code> <p>Existing EngineConfig instance</p> required <p>Returns:</p> Name Type Description <code>ConfigBuilder</code> <code>ConfigBuilder</code> <p>A new builder instance with the provided configuration</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>@classmethod\ndef from_engine_config(cls, engine_config: EngineConfig) -&gt; \"ConfigBuilder\":\n    \"\"\"Create a ConfigBuilder from an existing EngineConfig instance.\n\n    Args:\n        engine_config: Existing EngineConfig instance\n\n    Returns:\n        ConfigBuilder: A new builder instance with the provided configuration\n    \"\"\"\n    builder = cls()\n    builder._server_config = engine_config.server\n    builder._agent_config = engine_config.agent\n    return builder\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.ConfigBuilder.from_file","title":"<code>from_file(config_path: str = 'config.yaml') -&gt; ConfigBuilder</code>  <code>classmethod</code>","text":"<p>Create a ConfigBuilder from a YAML configuration file.</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>str</code> <p>Path to the configuration YAML file</p> <code>'config.yaml'</code> <p>Returns:</p> Name Type Description <code>ConfigBuilder</code> <code>ConfigBuilder</code> <p>A new builder instance with the loaded configuration</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>@classmethod\ndef from_file(cls, config_path: str = \"config.yaml\") -&gt; \"ConfigBuilder\":\n    \"\"\"Create a ConfigBuilder from a YAML configuration file.\n\n    Args:\n        config_path: Path to the configuration YAML file\n\n    Returns:\n        ConfigBuilder: A new builder instance with the loaded configuration\n    \"\"\"\n    engine_config = cls.load_from_file(config_path)\n    return cls.from_engine_config(engine_config)\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.ConfigBuilder.get_agent_class","title":"<code>get_agent_class(agent_type: str) -&gt; type[BaseAgent]</code>  <code>staticmethod</code>","text":"<p>Get the agent class for a given agent type without initializing it.</p> <p>Parameters:</p> Name Type Description Default <code>agent_type</code> <code>str</code> <p>The type of agent</p> required <p>Returns:</p> Type Description <code>type[BaseAgent]</code> <p>Type[BaseAgent]: The agent class</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If agent type is unsupported</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>@staticmethod\ndef get_agent_class(agent_type: str) -&gt; type[BaseAgent]:\n    \"\"\"Get the agent class for a given agent type without initializing it.\n\n    Args:\n        agent_type: The type of agent\n\n    Returns:\n        Type[BaseAgent]: The agent class\n\n    Raises:\n        ValueError: If agent type is unsupported\n    \"\"\"\n    if agent_type == \"langgraph\":\n        from ..agent.langgraph.langgraph import LanggraphAgent\n\n        return LanggraphAgent\n    elif agent_type == \"CREWAI\":\n        from ..agent.crewai.crewai import CrewAIAgent\n\n        return CrewAIAgent\n    # Future agent types can be added here:\n    # elif agent_type == \"crewai\":\n    #     from ..agent.crewai.agent import CrewAIAgent\n    #     return CrewAIAgent\n    else:\n        raise ValueError(f\"Unsupported agent type: {agent_type}\")\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.ConfigBuilder.initialize_agent_from_config","title":"<code>initialize_agent_from_config(engine_config: EngineConfig) -&gt; BaseAgent</code>  <code>async</code> <code>staticmethod</code>","text":"<p>Initialize an agent instance from a validated EngineConfig.</p> <p>Parameters:</p> Name Type Description Default <code>engine_config</code> <code>EngineConfig</code> <p>Validated configuration object</p> required <p>Returns:</p> Name Type Description <code>BaseAgent</code> <code>BaseAgent</code> <p>Initialized agent instance</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If agent type is unsupported</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>@staticmethod\nasync def initialize_agent_from_config(engine_config: EngineConfig) -&gt; BaseAgent:\n    \"\"\"Initialize an agent instance from a validated EngineConfig.\n\n    Args:\n        engine_config: Validated configuration object\n\n    Returns:\n        BaseAgent: Initialized agent instance\n\n    Raises:\n        ValueError: If agent type is unsupported\n    \"\"\"\n    agent_config_obj = engine_config.agent.config\n    print(engine_config)\n    agent_type = engine_config.agent.type\n\n    # Initialize the appropriate agent\n    agent_instance = None\n    if agent_type == \"langgraph\":\n        from idun_agent_engine.agent.langgraph.langgraph import LanggraphAgent\n\n        agent_instance = LanggraphAgent()\n    elif agent_type == \"CREWAI\":\n        from idun_agent_engine.agent.crewai.crewai import CrewAIAgent\n\n        agent_instance = CrewAIAgent()\n    # Future agent types can be added here:\n    # elif agent_type == \"crewai\":\n    #     from ..agent.crewai.agent import CrewAIAgent\n    #     agent_instance = CrewAIAgent()\n    # elif agent_type == \"autogen\":\n    #     from ..agent.autogen.agent import AutoGenAgent\n    #     agent_instance = AutoGenAgent()\n    else:\n        raise ValueError(f\"Unsupported agent type: {agent_type}\")\n\n    # Initialize the agent with its configuration\n    await agent_instance.initialize(agent_config_obj)  # type: ignore[arg-type]\n    return agent_instance\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.ConfigBuilder.load_and_initialize_agent","title":"<code>load_and_initialize_agent(config_path: str = 'config.yaml') -&gt; tuple[EngineConfig, BaseAgent]</code>  <code>async</code> <code>staticmethod</code>","text":"<p>Load configuration and initialize agent in one step.</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>str</code> <p>Path to the configuration YAML file</p> <code>'config.yaml'</code> <p>Returns:</p> Type Description <code>tuple[EngineConfig, BaseAgent]</code> <p>tuple[EngineConfig, BaseAgent]: Configuration and initialized agent</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>@staticmethod\nasync def load_and_initialize_agent(\n    config_path: str = \"config.yaml\",\n) -&gt; tuple[EngineConfig, BaseAgent]:\n    \"\"\"Load configuration and initialize agent in one step.\n\n    Args:\n        config_path: Path to the configuration YAML file\n\n    Returns:\n        tuple[EngineConfig, BaseAgent]: Configuration and initialized agent\n    \"\"\"\n    engine_config = ConfigBuilder.load_from_file(config_path)\n    agent = await ConfigBuilder.initialize_agent_from_config(engine_config)\n    return engine_config, agent\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.ConfigBuilder.load_from_file","title":"<code>load_from_file(config_path: str = 'config.yaml') -&gt; EngineConfig</code>  <code>staticmethod</code>","text":"<p>Load configuration from a YAML file and return a validated EngineConfig.</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>str</code> <p>Path to the configuration YAML file</p> <code>'config.yaml'</code> <p>Returns:</p> Name Type Description <code>EngineConfig</code> <code>EngineConfig</code> <p>Validated configuration object</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the configuration file doesn't exist</p> <code>ValidationError</code> <p>If the configuration is invalid</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>@staticmethod\ndef load_from_file(config_path: str = \"config.yaml\") -&gt; EngineConfig:\n    \"\"\"Load configuration from a YAML file and return a validated EngineConfig.\n\n    Args:\n        config_path: Path to the configuration YAML file\n\n    Returns:\n        EngineConfig: Validated configuration object\n\n    Raises:\n        FileNotFoundError: If the configuration file doesn't exist\n        ValidationError: If the configuration is invalid\n    \"\"\"\n    path = Path(config_path)\n    if not path.is_absolute():\n        # Resolve relative to the current working directory\n        path = Path.cwd() / path\n\n    with open(path) as f:\n        config_data = yaml.safe_load(f)\n\n    return EngineConfig.model_validate(config_data)\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.ConfigBuilder.resolve_config","title":"<code>resolve_config(config_path: str | None = None, config_dict: dict[str, Any] | None = None, engine_config: EngineConfig | None = None) -&gt; EngineConfig</code>  <code>staticmethod</code>","text":"<p>Umbrella function to resolve configuration from various sources.</p> <p>This function handles all the different ways configuration can be provided and returns a validated EngineConfig. It follows a priority order: 1. engine_config (pre-validated EngineConfig from ConfigBuilder) 2. config_dict (dictionary to be validated) 3. config_path (file path to load and validate) 4. default \"config.yaml\" file</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>str | None</code> <p>Path to a YAML configuration file</p> <code>None</code> <code>config_dict</code> <code>dict[str, Any] | None</code> <p>Dictionary containing configuration</p> <code>None</code> <code>engine_config</code> <code>EngineConfig | None</code> <p>Pre-validated EngineConfig instance</p> <code>None</code> <p>Returns:</p> Name Type Description <code>EngineConfig</code> <code>EngineConfig</code> <p>Validated configuration object</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If config file doesn't exist</p> <code>ValidationError</code> <p>If configuration is invalid</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>@staticmethod\ndef resolve_config(\n    config_path: str | None = None,\n    config_dict: dict[str, Any] | None = None,\n    engine_config: EngineConfig | None = None,\n) -&gt; EngineConfig:\n    \"\"\"Umbrella function to resolve configuration from various sources.\n\n    This function handles all the different ways configuration can be provided\n    and returns a validated EngineConfig. It follows a priority order:\n    1. engine_config (pre-validated EngineConfig from ConfigBuilder)\n    2. config_dict (dictionary to be validated)\n    3. config_path (file path to load and validate)\n    4. default \"config.yaml\" file\n\n    Args:\n        config_path: Path to a YAML configuration file\n        config_dict: Dictionary containing configuration\n        engine_config: Pre-validated EngineConfig instance\n\n    Returns:\n        EngineConfig: Validated configuration object\n\n    Raises:\n        FileNotFoundError: If config file doesn't exist\n        ValidationError: If configuration is invalid\n    \"\"\"\n    if engine_config:\n        # Use pre-validated EngineConfig (from ConfigBuilder)\n        print(\"\u2705 Using pre-validated EngineConfig\")\n        return engine_config\n    elif config_dict:\n        # Validate dictionary config\n        print(\"\u2705 Validated dictionary configuration\")\n        return EngineConfig.model_validate(config_dict)\n    elif config_path:\n        # Load from file using ConfigBuilder\n        print(f\"\u2705 Loaded configuration from {config_path}\")\n        return ConfigBuilder.load_from_file(config_path)\n    else:\n        # Default to loading config.yaml\n        print(\"\u2705 Loaded default configuration from config.yaml\")\n        return ConfigBuilder.load_from_file(\"config.yaml\")\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.ConfigBuilder.save_to_file","title":"<code>save_to_file(file_path: str) -&gt; None</code>","text":"<p>Save the configuration to a YAML file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path where to save the configuration file</p> required Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>def save_to_file(self, file_path: str) -&gt; None:\n    \"\"\"Save the configuration to a YAML file.\n\n    Args:\n        file_path: Path where to save the configuration file\n    \"\"\"\n    config = self.build_dict()\n    with open(file_path, \"w\") as f:\n        yaml.dump(config, f, default_flow_style=False, indent=2)\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.ConfigBuilder.validate_agent_config","title":"<code>validate_agent_config(agent_type: str, config: dict[str, Any]) -&gt; dict[str, Any]</code>  <code>staticmethod</code>","text":"<p>Validate agent configuration against the appropriate Pydantic model.</p> <p>Parameters:</p> Name Type Description Default <code>agent_type</code> <code>str</code> <p>The type of agent</p> required <code>config</code> <code>dict[str, Any]</code> <p>Configuration dictionary to validate</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dict[str, Any]: Validated configuration dictionary</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If agent type is unsupported or config is invalid</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>@staticmethod\ndef validate_agent_config(\n    agent_type: str, config: dict[str, Any]\n) -&gt; dict[str, Any]:\n    \"\"\"Validate agent configuration against the appropriate Pydantic model.\n\n    Args:\n        agent_type: The type of agent\n        config: Configuration dictionary to validate\n\n    Returns:\n        Dict[str, Any]: Validated configuration dictionary\n\n    Raises:\n        ValueError: If agent type is unsupported or config is invalid\n    \"\"\"\n    if agent_type == \"langgraph\":\n        validated_config = LangGraphAgentConfig.model_validate(config)\n        return validated_config.model_dump()\n    # Future agent types can be added here:\n    # elif agent_type == \"crewai\":\n    #     validated_config = CrewAIAgentConfig.model_validate(config)\n    #     return validated_config.model_dump()\n    else:\n        raise ValueError(f\"Unsupported agent type: {agent_type}\")\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.ConfigBuilder.with_api_port","title":"<code>with_api_port(port: int) -&gt; ConfigBuilder</code>","text":"<p>Set the API port for the server.</p> <p>Parameters:</p> Name Type Description Default <code>port</code> <code>int</code> <p>The port number to bind the server to</p> required <p>Returns:</p> Name Type Description <code>ConfigBuilder</code> <code>ConfigBuilder</code> <p>This builder instance for method chaining</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>def with_api_port(self, port: int) -&gt; \"ConfigBuilder\":\n    \"\"\"Set the API port for the server.\n\n    Args:\n        port: The port number to bind the server to\n\n    Returns:\n        ConfigBuilder: This builder instance for method chaining\n    \"\"\"\n    # Create new API config with updated port\n    api_config = ServerAPIConfig(port=port)\n    self._server_config = ServerConfig(\n        api=api_config,\n    )\n    return self\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.ConfigBuilder.with_custom_agent","title":"<code>with_custom_agent(agent_type: str, config: dict[str, Any]) -&gt; ConfigBuilder</code>","text":"<p>Configure a custom agent type.</p> <p>This method allows for configuring agent types that don't have dedicated builder methods yet. The config will be validated when the AgentConfig is created.</p> <p>Parameters:</p> Name Type Description Default <code>agent_type</code> <code>str</code> <p>The type of agent (e.g., \"crewai\", \"autogen\")</p> required <code>config</code> <code>dict[str, Any]</code> <p>Configuration dictionary specific to the agent type</p> required <p>Returns:</p> Name Type Description <code>ConfigBuilder</code> <code>ConfigBuilder</code> <p>This builder instance for method chaining</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>def with_custom_agent(\n    self, agent_type: str, config: dict[str, Any]\n) -&gt; \"ConfigBuilder\":\n    \"\"\"Configure a custom agent type.\n\n    This method allows for configuring agent types that don't have\n    dedicated builder methods yet. The config will be validated\n    when the AgentConfig is created.\n\n    Args:\n        agent_type: The type of agent (e.g., \"crewai\", \"autogen\")\n        config: Configuration dictionary specific to the agent type\n\n    Returns:\n        ConfigBuilder: This builder instance for method chaining\n    \"\"\"\n    if agent_type == \"langgraph\":\n        self._agent_config = AgentConfig(\n            type=\"langgraph\",\n            config=LangGraphAgentConfig.model_validate(config)\n        )\n    # elif agent_type == \"ADK\":\n    #     self._agent_config = ADKAgentSpec(\n    #         type=\"ADK\", config=BaseAgentConfig.model_validate(config)\n    #     )\n    # elif agent_type == \"CREWAI\":\n    #     self._agent_config = CrewAIAgentSpec(\n    #         type=\"CREWAI\", config=BaseAgentConfig.model_validate(config)\n    #     )\n    else:\n        raise ValueError(f\"Unsupported agent type: {agent_type}\")\n    return self\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.ConfigBuilder.with_langgraph_agent","title":"<code>with_langgraph_agent(name: str, graph_definition: str, sqlite_checkpointer: str | None = None, **additional_config) -&gt; ConfigBuilder</code>","text":"<p>Configure a LangGraph agent using the LangGraphAgentConfig model.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Human-readable name for the agent</p> required <code>graph_definition</code> <code>str</code> <p>Path to the graph in format \"module.py:variable_name\"</p> required <code>sqlite_checkpointer</code> <code>str | None</code> <p>Optional path to SQLite database for checkpointing</p> <code>None</code> <code>**additional_config</code> <p>Additional configuration parameters</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>ConfigBuilder</code> <code>ConfigBuilder</code> <p>This builder instance for method chaining</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>def with_langgraph_agent(\n    self,\n    name: str,\n    graph_definition: str,\n    sqlite_checkpointer: str | None = None,\n    **additional_config,\n) -&gt; \"ConfigBuilder\":\n    \"\"\"Configure a LangGraph agent using the LangGraphAgentConfig model.\n\n    Args:\n        name: Human-readable name for the agent\n        graph_definition: Path to the graph in format \"module.py:variable_name\"\n        sqlite_checkpointer: Optional path to SQLite database for checkpointing\n        **additional_config: Additional configuration parameters\n\n    Returns:\n        ConfigBuilder: This builder instance for method chaining\n    \"\"\"\n    # Build the agent config dictionary\n    agent_config_dict = {\n        \"name\": name,\n        \"graph_definition\": graph_definition,\n        **additional_config,\n    }\n\n    # Add checkpointer if specified\n    if sqlite_checkpointer:\n        checkpointer = SqliteCheckpointConfig(\n            type=\"sqlite\", db_url=f\"sqlite:///{sqlite_checkpointer}\"\n        )\n        agent_config_dict[\"checkpointer\"] = checkpointer\n\n    # Create and validate the LangGraph config\n    langgraph_config = LangGraphAgentConfig.model_validate(agent_config_dict)\n\n    # Create the agent config (store as strongly-typed model, not dict)\n    self._agent_config = AgentConfig(type=\"langgraph\", config=langgraph_config)\n    return self\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.ConfigBuilder.with_server_config","title":"<code>with_server_config(api_port: int | None = None, telemetry_provider: str | None = None) -&gt; ConfigBuilder</code>","text":"<p>Set server configuration options directly.</p> <p>Parameters:</p> Name Type Description Default <code>api_port</code> <code>int | None</code> <p>Optional API port</p> <code>None</code> <code>telemetry_provider</code> <code>str | None</code> <p>Optional telemetry provider</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ConfigBuilder</code> <code>ConfigBuilder</code> <p>This builder instance for method chaining</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>def with_server_config(\n    self, api_port: int | None = None, telemetry_provider: str | None = None\n) -&gt; \"ConfigBuilder\":\n    \"\"\"Set server configuration options directly.\n\n    Args:\n        api_port: Optional API port\n        telemetry_provider: Optional telemetry provider\n\n    Returns:\n        ConfigBuilder: This builder instance for method chaining\n    \"\"\"\n    api_config = (\n        ServerAPIConfig(port=api_port) if api_port else self._server_config.api\n    )\n\n    self._server_config = ServerConfig(api=api_config)\n    return self\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.create_app","title":"<code>create_app(config_path: str | None = None, config_dict: dict[str, Any] | None = None, engine_config: EngineConfig | None = None) -&gt; FastAPI</code>","text":"<p>Create a FastAPI application with an integrated agent.</p> <p>This is the main entry point for users of the Idun Agent Engine. It creates a fully configured FastAPI application that serves your agent with proper lifecycle management, routing, and error handling.</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>str | None</code> <p>Optional path to a YAML configuration file. If not provided, looks for 'config.yaml' in the current directory.</p> <code>None</code> <code>config_dict</code> <code>dict[str, Any] | None</code> <p>Optional dictionary containing configuration. If provided, takes precedence over config_path. Useful for programmatic configuration.</p> <code>None</code> <code>engine_config</code> <code>EngineConfig | None</code> <p>Pre-validated EngineConfig instance (from ConfigBuilder.build()). Takes precedence over other options.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>FastAPI</code> <code>FastAPI</code> <p>A configured FastAPI application ready to serve your agent.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/app_factory.py</code> <pre><code>def create_app(\n    config_path: str | None = None,\n    config_dict: dict[str, Any] | None = None,\n    engine_config: EngineConfig | None = None,\n) -&gt; FastAPI:\n    \"\"\"Create a FastAPI application with an integrated agent.\n\n    This is the main entry point for users of the Idun Agent Engine. It creates a\n    fully configured FastAPI application that serves your agent with proper\n    lifecycle management, routing, and error handling.\n\n    Args:\n        config_path: Optional path to a YAML configuration file. If not provided,\n            looks for 'config.yaml' in the current directory.\n        config_dict: Optional dictionary containing configuration. If provided,\n            takes precedence over config_path. Useful for programmatic configuration.\n        engine_config: Pre-validated EngineConfig instance (from ConfigBuilder.build()).\n            Takes precedence over other options.\n\n    Returns:\n        FastAPI: A configured FastAPI application ready to serve your agent.\n    \"\"\"\n    # Resolve configuration from various sources using ConfigBuilder's umbrella function\n    validated_config = ConfigBuilder.resolve_config(\n        config_path=config_path, config_dict=config_dict, engine_config=engine_config\n    )\n\n    # Create the FastAPI application\n    app = FastAPI(\n        lifespan=lifespan,\n        title=\"Idun Agent Engine Server\",\n        description=\"A production-ready server for conversational AI agents\",\n        version=\"0.1.0\",\n        docs_url=\"/docs\",\n        redoc_url=\"/redoc\",\n    )\n\n    # Store configuration in app state for lifespan to use\n    app.state.engine_config = validated_config\n\n    # Include the routers\n    app.include_router(agent_router, prefix=\"/agent\", tags=[\"Agent\"])\n    app.include_router(base_router, tags=[\"Base\"])\n\n    return app\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.run_server","title":"<code>run_server(app: FastAPI, host: str = '0.0.0.0', port: int = 8000, reload: bool = False, log_level: str = 'info', workers: int | None = None) -&gt; None</code>","text":"<p>Run a FastAPI application created with Idun Agent Engine.</p> <p>This is a convenience function that wraps uvicorn.run() with sensible defaults for serving agent applications. It automatically handles common deployment scenarios.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>FastAPI</code> <p>The FastAPI application created with create_app()</p> required <code>host</code> <code>str</code> <p>Host to bind the server to. Defaults to \"0.0.0.0\" (all interfaces)</p> <code>'0.0.0.0'</code> <code>port</code> <code>int</code> <p>Port to bind the server to. Defaults to 8000</p> <code>8000</code> <code>reload</code> <code>bool</code> <p>Enable auto-reload for development. Defaults to False</p> <code>False</code> <code>log_level</code> <code>str</code> <p>Logging level. Defaults to \"info\"</p> <code>'info'</code> <code>workers</code> <code>int | None</code> <p>Number of worker processes. If None, uses single process</p> <code>None</code> Example <p>from idun_agent_engine import create_app, run_server</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/server_runner.py</code> <pre><code>def run_server(\n    app: FastAPI,\n    host: str = \"0.0.0.0\",\n    port: int = 8000,\n    reload: bool = False,\n    log_level: str = \"info\",\n    workers: int | None = None,\n) -&gt; None:\n    \"\"\"Run a FastAPI application created with Idun Agent Engine.\n\n    This is a convenience function that wraps uvicorn.run() with sensible defaults\n    for serving agent applications. It automatically handles common deployment scenarios.\n\n    Args:\n        app: The FastAPI application created with create_app()\n        host: Host to bind the server to. Defaults to \"0.0.0.0\" (all interfaces)\n        port: Port to bind the server to. Defaults to 8000\n        reload: Enable auto-reload for development. Defaults to False\n        log_level: Logging level. Defaults to \"info\"\n        workers: Number of worker processes. If None, uses single process\n\n    Example:\n        from idun_agent_engine import create_app, run_server\n\n        # Create your app\n        app = create_app(\"config.yaml\")\n\n        # Run in development mode\n        run_server(app, reload=True)\n\n        # Run in production mode\n        run_server(app, workers=4)\n    \"\"\"\n    print(f\"\ud83c\udf10 Starting Idun Agent Engine server on http://{host}:{port}\")\n    print(f\"\ud83d\udcda API documentation available at http://{host}:{port}/docs\")\n\n    if reload and workers:\n        print(\n            \"\u26a0\ufe0f  Warning: reload=True is incompatible with workers &gt; 1. Disabling reload.\"\n        )\n        reload = False\n\n    uvicorn.run(\n        app,\n        host=host,\n        port=port,\n        # reload=reload,\n        log_level=log_level,\n        # workers=workers\n    )\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.run_server--create-your-app","title":"Create your app","text":"<p>app = create_app(\"config.yaml\")</p>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.run_server--run-in-development-mode","title":"Run in development mode","text":"<p>run_server(app, reload=True)</p>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.run_server--run-in-production-mode","title":"Run in production mode","text":"<p>run_server(app, workers=4)</p>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.run_server_from_builder","title":"<code>run_server_from_builder(config_builder, **kwargs) -&gt; None</code>","text":"<p>Create and run a server directly from a ConfigBuilder instance.</p> <p>This allows for programmatic configuration with immediate server startup.</p> <p>Parameters:</p> Name Type Description Default <code>config_builder</code> <p>ConfigBuilder instance (can be built or unbuilt)</p> required <code>**kwargs</code> <p>Additional arguments passed to run_server()</p> <code>{}</code> Example <p>from idun_agent_engine import ConfigBuilder</p> <p>builder = (ConfigBuilder()           .with_langgraph_agent(name=\"My Agent\", graph_definition=\"agent.py:graph\")           .with_api_port(8080))</p> <p>run_server_from_builder(builder, reload=True)</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/server_runner.py</code> <pre><code>def run_server_from_builder(config_builder, **kwargs) -&gt; None:\n    \"\"\"Create and run a server directly from a ConfigBuilder instance.\n\n    This allows for programmatic configuration with immediate server startup.\n\n    Args:\n        config_builder: ConfigBuilder instance (can be built or unbuilt)\n        **kwargs: Additional arguments passed to run_server()\n\n    Example:\n        from idun_agent_engine import ConfigBuilder\n\n        builder = (ConfigBuilder()\n                  .with_langgraph_agent(name=\"My Agent\", graph_definition=\"agent.py:graph\")\n                  .with_api_port(8080))\n\n        run_server_from_builder(builder, reload=True)\n    \"\"\"\n    from .app_factory import create_app\n\n    # Build the configuration if it's a ConfigBuilder instance\n    if hasattr(config_builder, \"build\"):\n        engine_config = config_builder.build()\n    else:\n        # Assume it's already an EngineConfig\n        engine_config = config_builder\n\n    # Create app with the config\n    app = create_app(engine_config=engine_config)\n\n    # Extract port from config if not overridden\n    if \"port\" not in kwargs:\n        kwargs[\"port\"] = engine_config.server.api.port\n\n    # Show configuration info\n    print(\"\ud83d\udd27 Using programmatic configuration\")\n    agent_name = (\n        engine_config.agent.config.get(\"name\")  # type: ignore[call-arg, index]\n        if hasattr(engine_config.agent.config, \"get\")\n        else getattr(engine_config.agent.config, \"name\", \"Unknown\")\n    )\n    print(f\"\ud83e\udd16 Agent: {agent_name} ({engine_config.agent.type})\")\n\n    run_server(app, **kwargs)\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.run_server_from_config","title":"<code>run_server_from_config(config_path: str = 'config.yaml', **kwargs) -&gt; None</code>","text":"<p>Create and run a server directly from a configuration file.</p> <p>This is the most convenient way to start a server - it combines create_app() and run_server() in a single function call using ConfigBuilder.</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>str</code> <p>Path to the configuration YAML file</p> <code>'config.yaml'</code> <code>**kwargs</code> <p>Additional arguments passed to run_server()</p> <code>{}</code> Example Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/server_runner.py</code> <pre><code>def run_server_from_config(config_path: str = \"config.yaml\", **kwargs) -&gt; None:\n    \"\"\"Create and run a server directly from a configuration file.\n\n    This is the most convenient way to start a server - it combines create_app()\n    and run_server() in a single function call using ConfigBuilder.\n\n    Args:\n        config_path: Path to the configuration YAML file\n        **kwargs: Additional arguments passed to run_server()\n\n    Example:\n        # Run server directly from config\n        run_server_from_config(\"my_agent.yaml\", port=8080, reload=True)\n    \"\"\"\n    from .app_factory import create_app\n    from .config_builder import ConfigBuilder\n\n    # Load configuration using ConfigBuilder\n    engine_config = ConfigBuilder.load_from_file(config_path)\n\n    # Create app with the loaded config\n    app = create_app(engine_config=engine_config)\n\n    # Extract port from config if not overridden\n    if \"port\" not in kwargs:\n        kwargs[\"port\"] = engine_config.server.api.port\n\n    # Show configuration info\n    print(f\"\ud83d\udd27 Loaded configuration from {config_path}\")\n    # Best-effort: handle both dict-like and model access\n    agent_name = (\n        engine_config.agent.config.get(\"name\")  # type: ignore[call-arg, index]\n        if hasattr(engine_config.agent.config, \"get\")\n        else getattr(engine_config.agent.config, \"name\", \"Unknown\")\n    )\n    print(f\"\ud83e\udd16 Agent: {agent_name} ({engine_config.agent.type})\")\n\n    run_server(app, **kwargs)\n</code></pre>"},{"location":"reference/idun_agent_engine/#idun_agent_engine.run_server_from_config--run-server-directly-from-config","title":"Run server directly from config","text":"<p>run_server_from_config(\"my_agent.yaml\", port=8080, reload=True)</p>"},{"location":"reference/idun_agent_engine/_version/","title":"idun_agent_engine._version","text":""},{"location":"reference/idun_agent_engine/_version/#idun_agent_engine._version","title":"<code>idun_agent_engine._version</code>","text":"<p>Version information for Idun Agent Engine.</p>"},{"location":"reference/idun_agent_engine/agent/","title":"idun_agent_engine.agent","text":""},{"location":"reference/idun_agent_engine/agent/#idun_agent_engine.agent","title":"<code>idun_agent_engine.agent</code>","text":"<p>Agent package exposing common base types.</p> Re-exports <ul> <li>BaseAgent: abstract base for all agents</li> <li>BaseAgentConfig: base model for agent configuration</li> </ul>"},{"location":"reference/idun_agent_engine/agent/#idun_agent_engine.agent.BaseAgent","title":"<code>BaseAgent</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base for agents pluggable into the Idun Agent Engine.</p> <p>Implements the public protocol that concrete agent adapters must follow.</p>"},{"location":"reference/idun_agent_engine/agent/#idun_agent_engine.agent.BaseAgent.agent_instance","title":"<code>agent_instance: Any</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Get the underlying agent instance from the specific framework.</p> <p>This might be set after initialization.</p>"},{"location":"reference/idun_agent_engine/agent/#idun_agent_engine.agent.BaseAgent.agent_type","title":"<code>agent_type: str</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Type or category of the agent (e.g., 'LangGraph', 'ADK').</p>"},{"location":"reference/idun_agent_engine/agent/#idun_agent_engine.agent.BaseAgent.configuration","title":"<code>configuration: ConfigType</code>  <code>property</code>","text":"<p>Return current configuration settings for the agent.</p> <p>This is typically the configuration used during initialization.</p>"},{"location":"reference/idun_agent_engine/agent/#idun_agent_engine.agent.BaseAgent.id","title":"<code>id: str</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Unique identifier for the agent instance.</p>"},{"location":"reference/idun_agent_engine/agent/#idun_agent_engine.agent.BaseAgent.infos","title":"<code>infos: dict[str, Any]</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>General information about the agent instance (e.g., version, status, metadata).</p>"},{"location":"reference/idun_agent_engine/agent/#idun_agent_engine.agent.BaseAgent.initialize","title":"<code>initialize(config: dict[str, Any]) -&gt; None</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Initialize the agent with a given configuration.</p> <p>This method should set up the underlying agent framework instance.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict[str, Any]</code> <p>A dictionary containing the agent's configuration.</p> required Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/base.py</code> <pre><code>@abstractmethod\nasync def initialize(self, config: dict[str, Any]) -&gt; None:\n    \"\"\"Initialize the agent with a given configuration.\n\n    This method should set up the underlying agent framework instance.\n\n    Args:\n        config: A dictionary containing the agent's configuration.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/#idun_agent_engine.agent.BaseAgent.invoke","title":"<code>invoke(message: Any) -&gt; Any</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Process a single input message and return a response.</p> <p>This should be an awaitable method if the underlying agent processes asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Any</code> <p>The input message for the agent.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The agent's response.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/base.py</code> <pre><code>@abstractmethod\nasync def invoke(self, message: Any) -&gt; Any:\n    \"\"\"Process a single input message and return a response.\n\n    This should be an awaitable method if the underlying agent processes\n    asynchronously.\n\n    Args:\n        message: The input message for the agent.\n\n    Returns:\n        The agent's response.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/#idun_agent_engine.agent.BaseAgent.stream","title":"<code>stream(message: Any) -&gt; AsyncGenerator[Any]</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Process a single input message and return an asynchronous stream.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Any</code> <p>The input message for the agent.</p> required <p>Yields:</p> Type Description <code>AsyncGenerator[Any]</code> <p>Chunks of the agent's response.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/base.py</code> <pre><code>@abstractmethod\nasync def stream(self, message: Any) -&gt; AsyncGenerator[Any]:\n    \"\"\"Process a single input message and return an asynchronous stream.\n\n    Args:\n        message: The input message for the agent.\n\n    Yields:\n        Chunks of the agent's response.\n    \"\"\"\n    # This is an async generator, so it needs `async def` and `yield`\n    # For the ABC, we can't have a `yield` directly in the abstract method body.\n    # The signature itself defines it as an async generator.\n    # Example: async for chunk in agent.stream(message): ...\n    if False:  # pragma: no cover (This is just to make it a generator type for static analysis)\n        yield\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/#idun_agent_engine.agent.BaseAgentConfig","title":"<code>BaseAgentConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base model for agent configurations. It can be extended by specific agent framework configurations.</p>"},{"location":"reference/idun_agent_engine/agent/base/","title":"idun_agent_engine.agent.base","text":""},{"location":"reference/idun_agent_engine/agent/base/#idun_agent_engine.agent.base","title":"<code>idun_agent_engine.agent.base</code>","text":"<p>Agent base interfaces.</p> <p>Defines the abstract <code>BaseAgent</code> used by all agent implementations.</p>"},{"location":"reference/idun_agent_engine/agent/base/#idun_agent_engine.agent.base.BaseAgent","title":"<code>BaseAgent</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base for agents pluggable into the Idun Agent Engine.</p> <p>Implements the public protocol that concrete agent adapters must follow.</p>"},{"location":"reference/idun_agent_engine/agent/base/#idun_agent_engine.agent.base.BaseAgent.agent_instance","title":"<code>agent_instance: Any</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Get the underlying agent instance from the specific framework.</p> <p>This might be set after initialization.</p>"},{"location":"reference/idun_agent_engine/agent/base/#idun_agent_engine.agent.base.BaseAgent.agent_type","title":"<code>agent_type: str</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Type or category of the agent (e.g., 'LangGraph', 'ADK').</p>"},{"location":"reference/idun_agent_engine/agent/base/#idun_agent_engine.agent.base.BaseAgent.configuration","title":"<code>configuration: ConfigType</code>  <code>property</code>","text":"<p>Return current configuration settings for the agent.</p> <p>This is typically the configuration used during initialization.</p>"},{"location":"reference/idun_agent_engine/agent/base/#idun_agent_engine.agent.base.BaseAgent.id","title":"<code>id: str</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Unique identifier for the agent instance.</p>"},{"location":"reference/idun_agent_engine/agent/base/#idun_agent_engine.agent.base.BaseAgent.infos","title":"<code>infos: dict[str, Any]</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>General information about the agent instance (e.g., version, status, metadata).</p>"},{"location":"reference/idun_agent_engine/agent/base/#idun_agent_engine.agent.base.BaseAgent.initialize","title":"<code>initialize(config: dict[str, Any]) -&gt; None</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Initialize the agent with a given configuration.</p> <p>This method should set up the underlying agent framework instance.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict[str, Any]</code> <p>A dictionary containing the agent's configuration.</p> required Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/base.py</code> <pre><code>@abstractmethod\nasync def initialize(self, config: dict[str, Any]) -&gt; None:\n    \"\"\"Initialize the agent with a given configuration.\n\n    This method should set up the underlying agent framework instance.\n\n    Args:\n        config: A dictionary containing the agent's configuration.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/base/#idun_agent_engine.agent.base.BaseAgent.invoke","title":"<code>invoke(message: Any) -&gt; Any</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Process a single input message and return a response.</p> <p>This should be an awaitable method if the underlying agent processes asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Any</code> <p>The input message for the agent.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The agent's response.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/base.py</code> <pre><code>@abstractmethod\nasync def invoke(self, message: Any) -&gt; Any:\n    \"\"\"Process a single input message and return a response.\n\n    This should be an awaitable method if the underlying agent processes\n    asynchronously.\n\n    Args:\n        message: The input message for the agent.\n\n    Returns:\n        The agent's response.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/base/#idun_agent_engine.agent.base.BaseAgent.stream","title":"<code>stream(message: Any) -&gt; AsyncGenerator[Any]</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Process a single input message and return an asynchronous stream.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Any</code> <p>The input message for the agent.</p> required <p>Yields:</p> Type Description <code>AsyncGenerator[Any]</code> <p>Chunks of the agent's response.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/base.py</code> <pre><code>@abstractmethod\nasync def stream(self, message: Any) -&gt; AsyncGenerator[Any]:\n    \"\"\"Process a single input message and return an asynchronous stream.\n\n    Args:\n        message: The input message for the agent.\n\n    Yields:\n        Chunks of the agent's response.\n    \"\"\"\n    # This is an async generator, so it needs `async def` and `yield`\n    # For the ABC, we can't have a `yield` directly in the abstract method body.\n    # The signature itself defines it as an async generator.\n    # Example: async for chunk in agent.stream(message): ...\n    if False:  # pragma: no cover (This is just to make it a generator type for static analysis)\n        yield\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/model/","title":"idun_agent_engine.agent.model","text":""},{"location":"reference/idun_agent_engine/agent/model/#idun_agent_engine.agent.model","title":"<code>idun_agent_engine.agent.model</code>","text":"<p>Common agent model definitions.</p>"},{"location":"reference/idun_agent_engine/agent/model/#idun_agent_engine.agent.model.BaseAgentConfig","title":"<code>BaseAgentConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base model for agent configurations. It can be extended by specific agent framework configurations.</p>"},{"location":"reference/idun_agent_engine/agent/crewai/","title":"idun_agent_engine.agent.crewai","text":""},{"location":"reference/idun_agent_engine/agent/crewai/#idun_agent_engine.agent.crewai","title":"<code>idun_agent_engine.agent.crewai</code>","text":"<p>CrewAI agent package.</p>"},{"location":"reference/idun_agent_engine/agent/crewai/#idun_agent_engine.agent.crewai.CrewAIAgent","title":"<code>CrewAIAgent()</code>","text":"<p>               Bases: <code>BaseAgent[BaseAgentConfig]</code></p> <p>Placeholder for a future CrewAI agent implementation.</p> <p>Initialize placeholder with optional configuration slot.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/crewai/crewai.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize placeholder with optional configuration slot.\"\"\"\n    self._configuration: BaseAgentConfig | None = None\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/crewai/#idun_agent_engine.agent.crewai.CrewAIAgent.agent_instance","title":"<code>agent_instance: Any</code>  <code>property</code>","text":"<p>Return underlying instance (not implemented).</p>"},{"location":"reference/idun_agent_engine/agent/crewai/#idun_agent_engine.agent.crewai.CrewAIAgent.agent_type","title":"<code>agent_type: str</code>  <code>property</code>","text":"<p>Return agent type label.</p>"},{"location":"reference/idun_agent_engine/agent/crewai/#idun_agent_engine.agent.crewai.CrewAIAgent.configuration","title":"<code>configuration: ConfigType</code>  <code>property</code>","text":"<p>Return current configuration settings for the agent.</p> <p>This is typically the configuration used during initialization.</p>"},{"location":"reference/idun_agent_engine/agent/crewai/#idun_agent_engine.agent.crewai.CrewAIAgent.id","title":"<code>id: str</code>  <code>property</code>","text":"<p>Return unique identifier (not implemented).</p>"},{"location":"reference/idun_agent_engine/agent/crewai/#idun_agent_engine.agent.crewai.CrewAIAgent.infos","title":"<code>infos: dict[str, Any]</code>  <code>property</code>","text":"<p>Return diagnostic information for placeholder agent.</p>"},{"location":"reference/idun_agent_engine/agent/crewai/#idun_agent_engine.agent.crewai.CrewAIAgent.initialize","title":"<code>initialize(config: dict[str, Any]) -&gt; None</code>  <code>async</code>","text":"<p>Initialize agent with provided config (not implemented).</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/crewai/crewai.py</code> <pre><code>async def initialize(\n    self, config: dict[str, Any]\n) -&gt; None:  # pragma: no cover - placeholder\n    \"\"\"Initialize agent with provided config (not implemented).\"\"\"\n    raise NotImplementedError(\"CrewAIAgent is not implemented yet\")\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/crewai/#idun_agent_engine.agent.crewai.CrewAIAgent.invoke","title":"<code>invoke(message: Any) -&gt; Any</code>  <code>async</code>","text":"<p>Process a single message (not implemented).</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/crewai/crewai.py</code> <pre><code>async def invoke(self, message: Any) -&gt; Any:  # pragma: no cover - placeholder\n    \"\"\"Process a single message (not implemented).\"\"\"\n    raise NotImplementedError(\"CrewAIAgent is not implemented yet\")\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/crewai/#idun_agent_engine.agent.crewai.CrewAIAgent.stream","title":"<code>stream(message: Any) -&gt; AsyncGenerator[Any]</code>  <code>async</code>","text":"<p>Stream responses for a message (not implemented).</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/crewai/crewai.py</code> <pre><code>async def stream(\n    self, message: Any\n) -&gt; AsyncGenerator[Any]:  # pragma: no cover - placeholder\n    \"\"\"Stream responses for a message (not implemented).\"\"\"\n    raise NotImplementedError(\"CrewAIAgent is not implemented yet\")\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/crewai/crewai/","title":"idun_agent_engine.agent.crewai.crewai","text":""},{"location":"reference/idun_agent_engine/agent/crewai/crewai/#idun_agent_engine.agent.crewai.crewai","title":"<code>idun_agent_engine.agent.crewai.crewai</code>","text":"<p>CrewAI agent adapter (placeholder).</p>"},{"location":"reference/idun_agent_engine/agent/crewai/crewai/#idun_agent_engine.agent.crewai.crewai.CrewAIAgent","title":"<code>CrewAIAgent()</code>","text":"<p>               Bases: <code>BaseAgent[BaseAgentConfig]</code></p> <p>Placeholder for a future CrewAI agent implementation.</p> <p>Initialize placeholder with optional configuration slot.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/crewai/crewai.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize placeholder with optional configuration slot.\"\"\"\n    self._configuration: BaseAgentConfig | None = None\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/crewai/crewai/#idun_agent_engine.agent.crewai.crewai.CrewAIAgent.agent_instance","title":"<code>agent_instance: Any</code>  <code>property</code>","text":"<p>Return underlying instance (not implemented).</p>"},{"location":"reference/idun_agent_engine/agent/crewai/crewai/#idun_agent_engine.agent.crewai.crewai.CrewAIAgent.agent_type","title":"<code>agent_type: str</code>  <code>property</code>","text":"<p>Return agent type label.</p>"},{"location":"reference/idun_agent_engine/agent/crewai/crewai/#idun_agent_engine.agent.crewai.crewai.CrewAIAgent.configuration","title":"<code>configuration: ConfigType</code>  <code>property</code>","text":"<p>Return current configuration settings for the agent.</p> <p>This is typically the configuration used during initialization.</p>"},{"location":"reference/idun_agent_engine/agent/crewai/crewai/#idun_agent_engine.agent.crewai.crewai.CrewAIAgent.id","title":"<code>id: str</code>  <code>property</code>","text":"<p>Return unique identifier (not implemented).</p>"},{"location":"reference/idun_agent_engine/agent/crewai/crewai/#idun_agent_engine.agent.crewai.crewai.CrewAIAgent.infos","title":"<code>infos: dict[str, Any]</code>  <code>property</code>","text":"<p>Return diagnostic information for placeholder agent.</p>"},{"location":"reference/idun_agent_engine/agent/crewai/crewai/#idun_agent_engine.agent.crewai.crewai.CrewAIAgent.initialize","title":"<code>initialize(config: dict[str, Any]) -&gt; None</code>  <code>async</code>","text":"<p>Initialize agent with provided config (not implemented).</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/crewai/crewai.py</code> <pre><code>async def initialize(\n    self, config: dict[str, Any]\n) -&gt; None:  # pragma: no cover - placeholder\n    \"\"\"Initialize agent with provided config (not implemented).\"\"\"\n    raise NotImplementedError(\"CrewAIAgent is not implemented yet\")\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/crewai/crewai/#idun_agent_engine.agent.crewai.crewai.CrewAIAgent.invoke","title":"<code>invoke(message: Any) -&gt; Any</code>  <code>async</code>","text":"<p>Process a single message (not implemented).</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/crewai/crewai.py</code> <pre><code>async def invoke(self, message: Any) -&gt; Any:  # pragma: no cover - placeholder\n    \"\"\"Process a single message (not implemented).\"\"\"\n    raise NotImplementedError(\"CrewAIAgent is not implemented yet\")\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/crewai/crewai/#idun_agent_engine.agent.crewai.crewai.CrewAIAgent.stream","title":"<code>stream(message: Any) -&gt; AsyncGenerator[Any]</code>  <code>async</code>","text":"<p>Stream responses for a message (not implemented).</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/crewai/crewai.py</code> <pre><code>async def stream(\n    self, message: Any\n) -&gt; AsyncGenerator[Any]:  # pragma: no cover - placeholder\n    \"\"\"Stream responses for a message (not implemented).\"\"\"\n    raise NotImplementedError(\"CrewAIAgent is not implemented yet\")\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/langgraph/","title":"idun_agent_engine.agent.langgraph","text":""},{"location":"reference/idun_agent_engine/agent/langgraph/#idun_agent_engine.agent.langgraph","title":"<code>idun_agent_engine.agent.langgraph</code>","text":"<p>LangGraph agent package.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/#idun_agent_engine.agent.langgraph.LangGraphAgentConfig","title":"<code>LangGraphAgentConfig</code>","text":"<p>               Bases: <code>BaseAgentConfig</code></p> <p>Configuration model for LangGraph agents.</p> <p>This model validates the 'config' block for an agent of type 'langgraph'.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/#idun_agent_engine.agent.langgraph.LanggraphAgent","title":"<code>LanggraphAgent()</code>","text":"<p>               Bases: <code>BaseAgent</code></p> <p>LangGraph agent adapter implementing the BaseAgent protocol.</p> <p>Initialize an unconfigured LanggraphAgent with default state.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/langgraph/langgraph.py</code> <pre><code>def __init__(self):\n    \"\"\"Initialize an unconfigured LanggraphAgent with default state.\"\"\"\n    self._id = str(uuid.uuid4())\n    self._agent_type = \"LangGraph\"\n    self._input_schema: Any = None\n    self._output_schema: Any = None\n    self._agent_instance: Any = None\n    self._checkpointer: Any = None\n    self._store: Any = None\n    self._connection: Any = None\n    self._configuration: lg_model.LangGraphAgentConfig | None = None\n    self._name: str = \"Unnamed LangGraph Agent\"\n    self._infos: dict[str, Any] = {\n        \"status\": \"Uninitialized\",\n        \"name\": self._name,\n        \"id\": self._id,\n    }\n    # Observability (provider-agnostic)\n    self._obs_callbacks: list[Any] | None = None\n    self._obs_run_name: str | None = None\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/langgraph/#idun_agent_engine.agent.langgraph.LanggraphAgent.agent_instance","title":"<code>agent_instance: Any</code>  <code>property</code>","text":"<p>Return compiled graph instance.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the agent is not yet initialized.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/#idun_agent_engine.agent.langgraph.LanggraphAgent.agent_type","title":"<code>agent_type: str</code>  <code>property</code>","text":"<p>Return agent type label.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/#idun_agent_engine.agent.langgraph.LanggraphAgent.configuration","title":"<code>configuration: lg_model.LangGraphAgentConfig</code>  <code>property</code>","text":"<p>Return validated configuration.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the agent has not been configured yet.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/#idun_agent_engine.agent.langgraph.LanggraphAgent.id","title":"<code>id: str</code>  <code>property</code>","text":"<p>Return unique identifier for this agent instance.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/#idun_agent_engine.agent.langgraph.LanggraphAgent.infos","title":"<code>infos: dict[str, Any]</code>  <code>property</code>","text":"<p>Return diagnostic information about the agent instance.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/#idun_agent_engine.agent.langgraph.LanggraphAgent.input_schema","title":"<code>input_schema: Any</code>  <code>property</code>","text":"<p>Return input schema provided by underlying graph if available.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/#idun_agent_engine.agent.langgraph.LanggraphAgent.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Return configured human-readable agent name.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/#idun_agent_engine.agent.langgraph.LanggraphAgent.output_schema","title":"<code>output_schema: Any</code>  <code>property</code>","text":"<p>Return output schema provided by underlying graph if available.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/#idun_agent_engine.agent.langgraph.LanggraphAgent.close","title":"<code>close()</code>  <code>async</code>","text":"<p>Closes any open resources, like database connections.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/langgraph/langgraph.py</code> <pre><code>async def close(self):\n    \"\"\"Closes any open resources, like database connections.\"\"\"\n    if self._connection:\n        await self._connection.close()\n        self._connection = None\n        print(\"Database connection closed.\")\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/langgraph/#idun_agent_engine.agent.langgraph.LanggraphAgent.initialize","title":"<code>initialize(config: lg_model.LangGraphAgentConfig) -&gt; None</code>  <code>async</code>","text":"<p>Initialize the LangGraph agent asynchronously.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/langgraph/langgraph.py</code> <pre><code>async def initialize(self, config: lg_model.LangGraphAgentConfig) -&gt; None:\n    \"\"\"Initialize the LangGraph agent asynchronously.\"\"\"\n    self._configuration = lg_model.LangGraphAgentConfig.model_validate(config)\n\n    self._name = self._configuration.name or \"Unnamed LangGraph Agent\"\n    self._infos[\"name\"] = self._name\n\n    await self._setup_persistence()\n\n    # Observability (provider-agnostic). Prefer generic block; fallback to legacy langfuse block.\n    obs_cfg = None\n    try:\n        if getattr(self._configuration, \"observability\", None):\n            obs_cfg = self._configuration.observability.resolved()  # type: ignore[attr-defined]\n        elif getattr(self._configuration, \"langfuse\", None):\n            lf = self._configuration.langfuse.resolved()  # type: ignore[attr-defined]\n            obs_cfg = type(\n                \"_Temp\",\n                (),\n                {\n                    \"provider\": \"langfuse\",\n                    \"enabled\": lf.enabled,\n                    \"options\": {\n                        \"host\": lf.host,\n                        \"public_key\": lf.public_key,\n                        \"secret_key\": lf.secret_key,\n                        \"run_name\": lf.run_name,\n                    },\n                },\n            )()\n    except Exception:\n        obs_cfg = None\n\n    if obs_cfg and getattr(obs_cfg, \"enabled\", False):\n        provider = getattr(obs_cfg, \"provider\", None)\n        options = dict(getattr(obs_cfg, \"options\", {}) or {})\n        # Fallback: if using Langfuse and run_name is not provided, use agent name\n        if provider == \"langfuse\" and not options.get(\"run_name\"):\n            options[\"run_name\"] = self._name\n\n        handler, info = observability.create_observability_handler(\n            {\n                \"provider\": provider,\n                \"enabled\": True,\n                \"options\": options,\n            }\n        )\n        if handler:\n            self._obs_callbacks = handler.get_callbacks()\n            self._obs_run_name = handler.get_run_name()\n        if info:\n            self._infos[\"observability\"] = dict(info)\n\n    graph_builder = self._load_graph_builder(self._configuration.graph_definition)\n    self._infos[\"graph_definition\"] = self._configuration.graph_definition\n\n    self._agent_instance = graph_builder.compile(\n        checkpointer=self._checkpointer, store=self._store\n    )\n\n    if self._agent_instance:\n        self._input_schema = self._agent_instance.input_schema\n        self._output_schema = self._agent_instance.output_schema\n        self._infos[\"input_schema\"] = str(self._input_schema)\n        self._infos[\"output_schema\"] = str(self._output_schema)\n    else:\n        self._input_schema = self._configuration.input_schema_definition\n        self._output_schema = self._configuration.output_schema_definition\n\n    self._infos[\"status\"] = \"Initialized\"\n    self._infos[\"config_used\"] = self._configuration.model_dump()\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/langgraph/#idun_agent_engine.agent.langgraph.LanggraphAgent.invoke","title":"<code>invoke(message: Any) -&gt; Any</code>  <code>async</code>","text":"<p>Process a single input to chat with the agent.</p> <p>The message should be a dictionary containing 'query' and 'session_id'.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/langgraph/langgraph.py</code> <pre><code>async def invoke(self, message: Any) -&gt; Any:\n    \"\"\"Process a single input to chat with the agent.\n\n    The message should be a dictionary containing 'query' and 'session_id'.\n    \"\"\"\n    if self._agent_instance is None:\n        raise RuntimeError(\n            \"Agent not initialized. Call initialize() before processing messages.\"\n        )\n\n    if (\n        not isinstance(message, dict)\n        or \"query\" not in message\n        or \"session_id\" not in message\n    ):\n        raise ValueError(\n            \"Message must be a dictionary with 'query' and 'session_id' keys.\"\n        )\n\n    graph_input = {\"messages\": [(\"user\", message[\"query\"])]}\n    config: dict[str, Any] = {\"configurable\": {\"thread_id\": message[\"session_id\"]}}\n    if self._obs_callbacks:\n        config[\"callbacks\"] = self._obs_callbacks\n        if self._obs_run_name:\n            config[\"run_name\"] = self._obs_run_name\n\n    output = await self._agent_instance.ainvoke(graph_input, config)\n\n    if output and \"messages\" in output and output[\"messages\"]:\n        response_message = output[\"messages\"][-1]\n        if hasattr(response_message, \"content\"):\n            return response_message.content\n        elif isinstance(response_message, dict) and \"content\" in response_message:\n            return response_message[\"content\"]\n        elif isinstance(response_message, tuple):\n            return response_message[1]\n        else:\n            # No usable content attribute; fall through to returning raw output\n            pass\n\n    return output\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/langgraph/#idun_agent_engine.agent.langgraph.LanggraphAgent.stream","title":"<code>stream(message: Any) -&gt; AsyncGenerator[Any]</code>  <code>async</code>","text":"<p>Processes a single input message and returns a stream of ag-ui events.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/langgraph/langgraph.py</code> <pre><code>async def stream(self, message: Any) -&gt; AsyncGenerator[Any]:\n    \"\"\"Processes a single input message and returns a stream of ag-ui events.\"\"\"\n    if self._agent_instance is None:\n        raise RuntimeError(\n            \"Agent not initialized. Call initialize() before processing messages.\"\n        )\n\n    if isinstance(message, dict) and \"query\" in message and \"session_id\" in message:\n        run_id = f\"run_{uuid.uuid4()}\"\n        thread_id = message[\"session_id\"]\n        user_message = ag_types.UserMessage(\n            id=f\"msg_{uuid.uuid4()}\", role=\"user\", content=message[\"query\"]\n        )\n        graph_input = {\n            \"messages\": [user_message.model_dump(by_alias=True, exclude_none=True)]\n        }\n    else:\n        raise ValueError(\n            \"Unsupported message format for process_message_stream. Expects {'query': str, 'session_id': str}\"\n        )\n\n    config: dict[str, Any] = {\"configurable\": {\"thread_id\": thread_id}}\n    if self._obs_callbacks:\n        config[\"callbacks\"] = self._obs_callbacks\n        if self._obs_run_name:\n            config[\"run_name\"] = self._obs_run_name\n\n    current_message_id: str | None = None\n    current_tool_call_id: str | None = None\n    tool_call_name: str | None = None\n    current_step_name = None\n\n    async for event in self._agent_instance.astream_events(\n        graph_input, config=config, version=\"v2\"\n    ):\n        kind = event[\"event\"]\n        name = event[\"name\"]\n\n        if kind == \"on_chain_start\":\n            current_step_name = name\n            if current_step_name.lower() == \"langgraph\":\n                yield ag_events.RunStartedEvent(\n                    type=ag_events.EventType.RUN_STARTED,\n                    run_id=run_id,\n                    thread_id=thread_id,\n                )\n            else:\n                yield ag_events.StepStartedEvent(\n                    type=ag_events.EventType.STEP_STARTED, step_name=name\n                )\n\n        elif kind == \"on_chain_end\":\n            if current_step_name:\n                yield ag_events.StepFinishedEvent(\n                    type=ag_events.EventType.STEP_FINISHED, step_name=name\n                )\n                current_step_name = None\n\n        elif kind == \"on_llm_start\":\n            yield ag_events.ThinkingStartEvent(\n                type=ag_events.EventType.THINKING_START,\n                title=f\"Thinking with {name}...\",\n            )\n\n        elif kind == \"on_llm_end\":\n            yield ag_events.ThinkingEndEvent(type=ag_events.EventType.THINKING_END)\n\n        elif kind == \"on_chat_model_stream\":\n            chunk = event[\"data\"][\"chunk\"]\n            if not current_message_id and (chunk.content or chunk.tool_calls):\n                current_message_id = f\"msg_{uuid.uuid4()}\"\n                yield ag_events.TextMessageStartEvent(\n                    type=ag_events.EventType.TEXT_MESSAGE_START,\n                    message_id=current_message_id or \"\",\n                    role=\"assistant\",\n                )\n\n            if chunk.content:\n                yield ag_events.TextMessageContentEvent(\n                    type=ag_events.EventType.TEXT_MESSAGE_CONTENT,\n                    message_id=current_message_id or \"\",\n                    delta=chunk.content,\n                )\n\n            if chunk.tool_calls:\n                for tc in chunk.tool_calls:\n                    if \"id\" in tc and tc[\"id\"] != current_tool_call_id:\n                        if (\n                            current_tool_call_id\n                        ):  # End previous tool call if a new one starts\n                            yield ag_events.ToolCallEndEvent(\n                                type=ag_events.EventType.TOOL_CALL_END,\n                                tool_call_id=current_tool_call_id,\n                            )\n\n                        current_tool_call_id = str(tc[\"id\"]) if tc.get(\"id\") is not None else None\n                        tool_call_name = str(tc[\"function\"][\"name\"]) if tc.get(\"function\") and tc[\"function\"].get(\"name\") is not None else None\n                        yield ag_events.ToolCallStartEvent(\n                            type=ag_events.EventType.TOOL_CALL_START,\n                            tool_call_id=current_tool_call_id or \"\",\n                            tool_call_name=tool_call_name or \"\",\n                            parent_message_id=current_message_id or \"\",\n                        )\n\n                    if (\n                        \"function\" in tc\n                        and \"arguments\" in tc[\"function\"]\n                        and tc[\"function\"][\"arguments\"]\n                    ):\n                        yield ag_events.ToolCallArgsEvent(\n                            type=ag_events.EventType.TOOL_CALL_ARGS,\n                            tool_call_id=current_tool_call_id or \"\",\n                            delta=tc[\"function\"][\"arguments\"],\n                        )\n\n        elif kind == \"on_tool_start\":\n            yield ag_events.StepStartedEvent(\n                type=ag_events.EventType.STEP_STARTED, step_name=name\n            )\n\n        elif kind == \"on_tool_end\":\n            # Tool end event from langgraph has the tool output, but ag-ui model doesn't have a place for it in ToolCallEndEvent\n            if current_tool_call_id:\n                yield ag_events.ToolCallEndEvent(\n                            type=ag_events.EventType.TOOL_CALL_END,\n                            tool_call_id=current_tool_call_id or \"\",\n                )\n                current_tool_call_id = None\n\n            yield ag_events.StepFinishedEvent(\n                type=ag_events.EventType.STEP_FINISHED, step_name=name\n            )\n            tool_call_name = None\n\n    if current_tool_call_id:\n        yield ag_events.ToolCallEndEvent(\n            type=ag_events.EventType.TOOL_CALL_END,\n            tool_call_id=current_tool_call_id or \"\",\n        )\n\n    if current_message_id:\n        yield ag_events.TextMessageEndEvent(\n            type=ag_events.EventType.TEXT_MESSAGE_END, message_id=current_message_id or \"\"\n        )\n\n    yield ag_events.RunFinishedEvent(\n        type=ag_events.EventType.RUN_FINISHED, run_id=run_id, thread_id=thread_id\n    )\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/langgraph/#idun_agent_engine.agent.langgraph.SqliteCheckpointConfig","title":"<code>SqliteCheckpointConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for SQLite checkpointer.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/#idun_agent_engine.agent.langgraph.SqliteCheckpointConfig.db_path","title":"<code>db_path: str</code>  <code>property</code>","text":"<p>Extracts the database file path from the db_url.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/#idun_agent_engine.agent.langgraph.SqliteCheckpointConfig.db_url_must_be_sqlite","title":"<code>db_url_must_be_sqlite(v: str) -&gt; str</code>  <code>classmethod</code>","text":"<p>Validate that db_url uses sqlite scheme.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/langgraph/langgraph_model.py</code> <pre><code>@field_validator(\"db_url\")\n@classmethod\ndef db_url_must_be_sqlite(cls, v: str) -&gt; str:\n    \"\"\"Validate that db_url uses sqlite scheme.\"\"\"\n    if not v.startswith(\"sqlite:///\"):\n        raise ValueError(\"SQLite DB URL must start with 'sqlite:///'\")\n    return v\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/langgraph/langgraph/","title":"idun_agent_engine.agent.langgraph.langgraph","text":""},{"location":"reference/idun_agent_engine/agent/langgraph/langgraph/#idun_agent_engine.agent.langgraph.langgraph","title":"<code>idun_agent_engine.agent.langgraph.langgraph</code>","text":"<p>LangGraph agent adapter implementing the BaseAgent protocol.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/langgraph/#idun_agent_engine.agent.langgraph.langgraph.LanggraphAgent","title":"<code>LanggraphAgent()</code>","text":"<p>               Bases: <code>BaseAgent</code></p> <p>LangGraph agent adapter implementing the BaseAgent protocol.</p> <p>Initialize an unconfigured LanggraphAgent with default state.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/langgraph/langgraph.py</code> <pre><code>def __init__(self):\n    \"\"\"Initialize an unconfigured LanggraphAgent with default state.\"\"\"\n    self._id = str(uuid.uuid4())\n    self._agent_type = \"LangGraph\"\n    self._input_schema: Any = None\n    self._output_schema: Any = None\n    self._agent_instance: Any = None\n    self._checkpointer: Any = None\n    self._store: Any = None\n    self._connection: Any = None\n    self._configuration: lg_model.LangGraphAgentConfig | None = None\n    self._name: str = \"Unnamed LangGraph Agent\"\n    self._infos: dict[str, Any] = {\n        \"status\": \"Uninitialized\",\n        \"name\": self._name,\n        \"id\": self._id,\n    }\n    # Observability (provider-agnostic)\n    self._obs_callbacks: list[Any] | None = None\n    self._obs_run_name: str | None = None\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/langgraph/langgraph/#idun_agent_engine.agent.langgraph.langgraph.LanggraphAgent.agent_instance","title":"<code>agent_instance: Any</code>  <code>property</code>","text":"<p>Return compiled graph instance.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the agent is not yet initialized.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/langgraph/#idun_agent_engine.agent.langgraph.langgraph.LanggraphAgent.agent_type","title":"<code>agent_type: str</code>  <code>property</code>","text":"<p>Return agent type label.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/langgraph/#idun_agent_engine.agent.langgraph.langgraph.LanggraphAgent.configuration","title":"<code>configuration: lg_model.LangGraphAgentConfig</code>  <code>property</code>","text":"<p>Return validated configuration.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the agent has not been configured yet.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/langgraph/#idun_agent_engine.agent.langgraph.langgraph.LanggraphAgent.id","title":"<code>id: str</code>  <code>property</code>","text":"<p>Return unique identifier for this agent instance.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/langgraph/#idun_agent_engine.agent.langgraph.langgraph.LanggraphAgent.infos","title":"<code>infos: dict[str, Any]</code>  <code>property</code>","text":"<p>Return diagnostic information about the agent instance.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/langgraph/#idun_agent_engine.agent.langgraph.langgraph.LanggraphAgent.input_schema","title":"<code>input_schema: Any</code>  <code>property</code>","text":"<p>Return input schema provided by underlying graph if available.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/langgraph/#idun_agent_engine.agent.langgraph.langgraph.LanggraphAgent.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Return configured human-readable agent name.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/langgraph/#idun_agent_engine.agent.langgraph.langgraph.LanggraphAgent.output_schema","title":"<code>output_schema: Any</code>  <code>property</code>","text":"<p>Return output schema provided by underlying graph if available.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/langgraph/#idun_agent_engine.agent.langgraph.langgraph.LanggraphAgent.close","title":"<code>close()</code>  <code>async</code>","text":"<p>Closes any open resources, like database connections.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/langgraph/langgraph.py</code> <pre><code>async def close(self):\n    \"\"\"Closes any open resources, like database connections.\"\"\"\n    if self._connection:\n        await self._connection.close()\n        self._connection = None\n        print(\"Database connection closed.\")\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/langgraph/langgraph/#idun_agent_engine.agent.langgraph.langgraph.LanggraphAgent.initialize","title":"<code>initialize(config: lg_model.LangGraphAgentConfig) -&gt; None</code>  <code>async</code>","text":"<p>Initialize the LangGraph agent asynchronously.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/langgraph/langgraph.py</code> <pre><code>async def initialize(self, config: lg_model.LangGraphAgentConfig) -&gt; None:\n    \"\"\"Initialize the LangGraph agent asynchronously.\"\"\"\n    self._configuration = lg_model.LangGraphAgentConfig.model_validate(config)\n\n    self._name = self._configuration.name or \"Unnamed LangGraph Agent\"\n    self._infos[\"name\"] = self._name\n\n    await self._setup_persistence()\n\n    # Observability (provider-agnostic). Prefer generic block; fallback to legacy langfuse block.\n    obs_cfg = None\n    try:\n        if getattr(self._configuration, \"observability\", None):\n            obs_cfg = self._configuration.observability.resolved()  # type: ignore[attr-defined]\n        elif getattr(self._configuration, \"langfuse\", None):\n            lf = self._configuration.langfuse.resolved()  # type: ignore[attr-defined]\n            obs_cfg = type(\n                \"_Temp\",\n                (),\n                {\n                    \"provider\": \"langfuse\",\n                    \"enabled\": lf.enabled,\n                    \"options\": {\n                        \"host\": lf.host,\n                        \"public_key\": lf.public_key,\n                        \"secret_key\": lf.secret_key,\n                        \"run_name\": lf.run_name,\n                    },\n                },\n            )()\n    except Exception:\n        obs_cfg = None\n\n    if obs_cfg and getattr(obs_cfg, \"enabled\", False):\n        provider = getattr(obs_cfg, \"provider\", None)\n        options = dict(getattr(obs_cfg, \"options\", {}) or {})\n        # Fallback: if using Langfuse and run_name is not provided, use agent name\n        if provider == \"langfuse\" and not options.get(\"run_name\"):\n            options[\"run_name\"] = self._name\n\n        handler, info = observability.create_observability_handler(\n            {\n                \"provider\": provider,\n                \"enabled\": True,\n                \"options\": options,\n            }\n        )\n        if handler:\n            self._obs_callbacks = handler.get_callbacks()\n            self._obs_run_name = handler.get_run_name()\n        if info:\n            self._infos[\"observability\"] = dict(info)\n\n    graph_builder = self._load_graph_builder(self._configuration.graph_definition)\n    self._infos[\"graph_definition\"] = self._configuration.graph_definition\n\n    self._agent_instance = graph_builder.compile(\n        checkpointer=self._checkpointer, store=self._store\n    )\n\n    if self._agent_instance:\n        self._input_schema = self._agent_instance.input_schema\n        self._output_schema = self._agent_instance.output_schema\n        self._infos[\"input_schema\"] = str(self._input_schema)\n        self._infos[\"output_schema\"] = str(self._output_schema)\n    else:\n        self._input_schema = self._configuration.input_schema_definition\n        self._output_schema = self._configuration.output_schema_definition\n\n    self._infos[\"status\"] = \"Initialized\"\n    self._infos[\"config_used\"] = self._configuration.model_dump()\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/langgraph/langgraph/#idun_agent_engine.agent.langgraph.langgraph.LanggraphAgent.invoke","title":"<code>invoke(message: Any) -&gt; Any</code>  <code>async</code>","text":"<p>Process a single input to chat with the agent.</p> <p>The message should be a dictionary containing 'query' and 'session_id'.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/langgraph/langgraph.py</code> <pre><code>async def invoke(self, message: Any) -&gt; Any:\n    \"\"\"Process a single input to chat with the agent.\n\n    The message should be a dictionary containing 'query' and 'session_id'.\n    \"\"\"\n    if self._agent_instance is None:\n        raise RuntimeError(\n            \"Agent not initialized. Call initialize() before processing messages.\"\n        )\n\n    if (\n        not isinstance(message, dict)\n        or \"query\" not in message\n        or \"session_id\" not in message\n    ):\n        raise ValueError(\n            \"Message must be a dictionary with 'query' and 'session_id' keys.\"\n        )\n\n    graph_input = {\"messages\": [(\"user\", message[\"query\"])]}\n    config: dict[str, Any] = {\"configurable\": {\"thread_id\": message[\"session_id\"]}}\n    if self._obs_callbacks:\n        config[\"callbacks\"] = self._obs_callbacks\n        if self._obs_run_name:\n            config[\"run_name\"] = self._obs_run_name\n\n    output = await self._agent_instance.ainvoke(graph_input, config)\n\n    if output and \"messages\" in output and output[\"messages\"]:\n        response_message = output[\"messages\"][-1]\n        if hasattr(response_message, \"content\"):\n            return response_message.content\n        elif isinstance(response_message, dict) and \"content\" in response_message:\n            return response_message[\"content\"]\n        elif isinstance(response_message, tuple):\n            return response_message[1]\n        else:\n            # No usable content attribute; fall through to returning raw output\n            pass\n\n    return output\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/langgraph/langgraph/#idun_agent_engine.agent.langgraph.langgraph.LanggraphAgent.stream","title":"<code>stream(message: Any) -&gt; AsyncGenerator[Any]</code>  <code>async</code>","text":"<p>Processes a single input message and returns a stream of ag-ui events.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/langgraph/langgraph.py</code> <pre><code>async def stream(self, message: Any) -&gt; AsyncGenerator[Any]:\n    \"\"\"Processes a single input message and returns a stream of ag-ui events.\"\"\"\n    if self._agent_instance is None:\n        raise RuntimeError(\n            \"Agent not initialized. Call initialize() before processing messages.\"\n        )\n\n    if isinstance(message, dict) and \"query\" in message and \"session_id\" in message:\n        run_id = f\"run_{uuid.uuid4()}\"\n        thread_id = message[\"session_id\"]\n        user_message = ag_types.UserMessage(\n            id=f\"msg_{uuid.uuid4()}\", role=\"user\", content=message[\"query\"]\n        )\n        graph_input = {\n            \"messages\": [user_message.model_dump(by_alias=True, exclude_none=True)]\n        }\n    else:\n        raise ValueError(\n            \"Unsupported message format for process_message_stream. Expects {'query': str, 'session_id': str}\"\n        )\n\n    config: dict[str, Any] = {\"configurable\": {\"thread_id\": thread_id}}\n    if self._obs_callbacks:\n        config[\"callbacks\"] = self._obs_callbacks\n        if self._obs_run_name:\n            config[\"run_name\"] = self._obs_run_name\n\n    current_message_id: str | None = None\n    current_tool_call_id: str | None = None\n    tool_call_name: str | None = None\n    current_step_name = None\n\n    async for event in self._agent_instance.astream_events(\n        graph_input, config=config, version=\"v2\"\n    ):\n        kind = event[\"event\"]\n        name = event[\"name\"]\n\n        if kind == \"on_chain_start\":\n            current_step_name = name\n            if current_step_name.lower() == \"langgraph\":\n                yield ag_events.RunStartedEvent(\n                    type=ag_events.EventType.RUN_STARTED,\n                    run_id=run_id,\n                    thread_id=thread_id,\n                )\n            else:\n                yield ag_events.StepStartedEvent(\n                    type=ag_events.EventType.STEP_STARTED, step_name=name\n                )\n\n        elif kind == \"on_chain_end\":\n            if current_step_name:\n                yield ag_events.StepFinishedEvent(\n                    type=ag_events.EventType.STEP_FINISHED, step_name=name\n                )\n                current_step_name = None\n\n        elif kind == \"on_llm_start\":\n            yield ag_events.ThinkingStartEvent(\n                type=ag_events.EventType.THINKING_START,\n                title=f\"Thinking with {name}...\",\n            )\n\n        elif kind == \"on_llm_end\":\n            yield ag_events.ThinkingEndEvent(type=ag_events.EventType.THINKING_END)\n\n        elif kind == \"on_chat_model_stream\":\n            chunk = event[\"data\"][\"chunk\"]\n            if not current_message_id and (chunk.content or chunk.tool_calls):\n                current_message_id = f\"msg_{uuid.uuid4()}\"\n                yield ag_events.TextMessageStartEvent(\n                    type=ag_events.EventType.TEXT_MESSAGE_START,\n                    message_id=current_message_id or \"\",\n                    role=\"assistant\",\n                )\n\n            if chunk.content:\n                yield ag_events.TextMessageContentEvent(\n                    type=ag_events.EventType.TEXT_MESSAGE_CONTENT,\n                    message_id=current_message_id or \"\",\n                    delta=chunk.content,\n                )\n\n            if chunk.tool_calls:\n                for tc in chunk.tool_calls:\n                    if \"id\" in tc and tc[\"id\"] != current_tool_call_id:\n                        if (\n                            current_tool_call_id\n                        ):  # End previous tool call if a new one starts\n                            yield ag_events.ToolCallEndEvent(\n                                type=ag_events.EventType.TOOL_CALL_END,\n                                tool_call_id=current_tool_call_id,\n                            )\n\n                        current_tool_call_id = str(tc[\"id\"]) if tc.get(\"id\") is not None else None\n                        tool_call_name = str(tc[\"function\"][\"name\"]) if tc.get(\"function\") and tc[\"function\"].get(\"name\") is not None else None\n                        yield ag_events.ToolCallStartEvent(\n                            type=ag_events.EventType.TOOL_CALL_START,\n                            tool_call_id=current_tool_call_id or \"\",\n                            tool_call_name=tool_call_name or \"\",\n                            parent_message_id=current_message_id or \"\",\n                        )\n\n                    if (\n                        \"function\" in tc\n                        and \"arguments\" in tc[\"function\"]\n                        and tc[\"function\"][\"arguments\"]\n                    ):\n                        yield ag_events.ToolCallArgsEvent(\n                            type=ag_events.EventType.TOOL_CALL_ARGS,\n                            tool_call_id=current_tool_call_id or \"\",\n                            delta=tc[\"function\"][\"arguments\"],\n                        )\n\n        elif kind == \"on_tool_start\":\n            yield ag_events.StepStartedEvent(\n                type=ag_events.EventType.STEP_STARTED, step_name=name\n            )\n\n        elif kind == \"on_tool_end\":\n            # Tool end event from langgraph has the tool output, but ag-ui model doesn't have a place for it in ToolCallEndEvent\n            if current_tool_call_id:\n                yield ag_events.ToolCallEndEvent(\n                            type=ag_events.EventType.TOOL_CALL_END,\n                            tool_call_id=current_tool_call_id or \"\",\n                )\n                current_tool_call_id = None\n\n            yield ag_events.StepFinishedEvent(\n                type=ag_events.EventType.STEP_FINISHED, step_name=name\n            )\n            tool_call_name = None\n\n    if current_tool_call_id:\n        yield ag_events.ToolCallEndEvent(\n            type=ag_events.EventType.TOOL_CALL_END,\n            tool_call_id=current_tool_call_id or \"\",\n        )\n\n    if current_message_id:\n        yield ag_events.TextMessageEndEvent(\n            type=ag_events.EventType.TEXT_MESSAGE_END, message_id=current_message_id or \"\"\n        )\n\n    yield ag_events.RunFinishedEvent(\n        type=ag_events.EventType.RUN_FINISHED, run_id=run_id, thread_id=thread_id\n    )\n</code></pre>"},{"location":"reference/idun_agent_engine/agent/langgraph/langgraph_model/","title":"idun_agent_engine.agent.langgraph.langgraph_model","text":""},{"location":"reference/idun_agent_engine/agent/langgraph/langgraph_model/#idun_agent_engine.agent.langgraph.langgraph_model","title":"<code>idun_agent_engine.agent.langgraph.langgraph_model</code>","text":"<p>Configuration models for LangGraph agents.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/langgraph_model/#idun_agent_engine.agent.langgraph.langgraph_model.LangGraphAgentConfig","title":"<code>LangGraphAgentConfig</code>","text":"<p>               Bases: <code>BaseAgentConfig</code></p> <p>Configuration model for LangGraph agents.</p> <p>This model validates the 'config' block for an agent of type 'langgraph'.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/langgraph_model/#idun_agent_engine.agent.langgraph.langgraph_model.SqliteCheckpointConfig","title":"<code>SqliteCheckpointConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for SQLite checkpointer.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/langgraph_model/#idun_agent_engine.agent.langgraph.langgraph_model.SqliteCheckpointConfig.db_path","title":"<code>db_path: str</code>  <code>property</code>","text":"<p>Extracts the database file path from the db_url.</p>"},{"location":"reference/idun_agent_engine/agent/langgraph/langgraph_model/#idun_agent_engine.agent.langgraph.langgraph_model.SqliteCheckpointConfig.db_url_must_be_sqlite","title":"<code>db_url_must_be_sqlite(v: str) -&gt; str</code>  <code>classmethod</code>","text":"<p>Validate that db_url uses sqlite scheme.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/agent/langgraph/langgraph_model.py</code> <pre><code>@field_validator(\"db_url\")\n@classmethod\ndef db_url_must_be_sqlite(cls, v: str) -&gt; str:\n    \"\"\"Validate that db_url uses sqlite scheme.\"\"\"\n    if not v.startswith(\"sqlite:///\"):\n        raise ValueError(\"SQLite DB URL must start with 'sqlite:///'\")\n    return v\n</code></pre>"},{"location":"reference/idun_agent_engine/cli/","title":"idun_agent_engine.cli","text":""},{"location":"reference/idun_agent_engine/cli/#idun_agent_engine.cli","title":"<code>idun_agent_engine.cli</code>","text":"<p>Command Line Interface for Idun Agent Engine.</p> <p>This module will provide CLI tools for: - Generating boilerplate projects - Running agents from the command line - Validating configurations - Deploying agents to various platforms</p> <p>Future commands will include: - <code>idun init</code> - Create a new agent project - <code>idun run</code> - Run an agent from config - <code>idun validate</code> - Validate configuration files - <code>idun deploy</code> - Deploy to cloud platforms</p>"},{"location":"reference/idun_agent_engine/core/","title":"idun_agent_engine.core","text":""},{"location":"reference/idun_agent_engine/core/#idun_agent_engine.core","title":"<code>idun_agent_engine.core</code>","text":"<p>Core module for the Idun Agent Engine.</p> <p>This module contains the user-facing API components that make it easy to: - Create FastAPI applications with agent integrations - Run servers with proper configuration - Build configurations programmatically - Handle common deployment scenarios</p> <p>The core module abstracts away the internal complexity while providing a clean, intuitive interface for end users.</p>"},{"location":"reference/idun_agent_engine/core/app_factory/","title":"idun_agent_engine.core.app_factory","text":""},{"location":"reference/idun_agent_engine/core/app_factory/#idun_agent_engine.core.app_factory","title":"<code>idun_agent_engine.core.app_factory</code>","text":"<p>Application Factory for Idun Agent Engine.</p> <p>This module provides the main entry point for users to create a FastAPI application with their agent integrated. It handles all the complexity of setting up routes, dependencies, and lifecycle management behind the scenes.</p>"},{"location":"reference/idun_agent_engine/core/app_factory/#idun_agent_engine.core.app_factory.create_app","title":"<code>create_app(config_path: str | None = None, config_dict: dict[str, Any] | None = None, engine_config: EngineConfig | None = None) -&gt; FastAPI</code>","text":"<p>Create a FastAPI application with an integrated agent.</p> <p>This is the main entry point for users of the Idun Agent Engine. It creates a fully configured FastAPI application that serves your agent with proper lifecycle management, routing, and error handling.</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>str | None</code> <p>Optional path to a YAML configuration file. If not provided, looks for 'config.yaml' in the current directory.</p> <code>None</code> <code>config_dict</code> <code>dict[str, Any] | None</code> <p>Optional dictionary containing configuration. If provided, takes precedence over config_path. Useful for programmatic configuration.</p> <code>None</code> <code>engine_config</code> <code>EngineConfig | None</code> <p>Pre-validated EngineConfig instance (from ConfigBuilder.build()). Takes precedence over other options.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>FastAPI</code> <code>FastAPI</code> <p>A configured FastAPI application ready to serve your agent.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/app_factory.py</code> <pre><code>def create_app(\n    config_path: str | None = None,\n    config_dict: dict[str, Any] | None = None,\n    engine_config: EngineConfig | None = None,\n) -&gt; FastAPI:\n    \"\"\"Create a FastAPI application with an integrated agent.\n\n    This is the main entry point for users of the Idun Agent Engine. It creates a\n    fully configured FastAPI application that serves your agent with proper\n    lifecycle management, routing, and error handling.\n\n    Args:\n        config_path: Optional path to a YAML configuration file. If not provided,\n            looks for 'config.yaml' in the current directory.\n        config_dict: Optional dictionary containing configuration. If provided,\n            takes precedence over config_path. Useful for programmatic configuration.\n        engine_config: Pre-validated EngineConfig instance (from ConfigBuilder.build()).\n            Takes precedence over other options.\n\n    Returns:\n        FastAPI: A configured FastAPI application ready to serve your agent.\n    \"\"\"\n    # Resolve configuration from various sources using ConfigBuilder's umbrella function\n    validated_config = ConfigBuilder.resolve_config(\n        config_path=config_path, config_dict=config_dict, engine_config=engine_config\n    )\n\n    # Create the FastAPI application\n    app = FastAPI(\n        lifespan=lifespan,\n        title=\"Idun Agent Engine Server\",\n        description=\"A production-ready server for conversational AI agents\",\n        version=\"0.1.0\",\n        docs_url=\"/docs\",\n        redoc_url=\"/redoc\",\n    )\n\n    # Store configuration in app state for lifespan to use\n    app.state.engine_config = validated_config\n\n    # Include the routers\n    app.include_router(agent_router, prefix=\"/agent\", tags=[\"Agent\"])\n    app.include_router(base_router, tags=[\"Base\"])\n\n    return app\n</code></pre>"},{"location":"reference/idun_agent_engine/core/config_builder/","title":"idun_agent_engine.core.config_builder","text":""},{"location":"reference/idun_agent_engine/core/config_builder/#idun_agent_engine.core.config_builder","title":"<code>idun_agent_engine.core.config_builder</code>","text":"<p>Configuration Builder for Idun Agent Engine.</p> <p>This module provides a fluent API for building configuration objects using Pydantic models. This approach ensures type safety, validation, and consistency with the rest of the codebase.</p>"},{"location":"reference/idun_agent_engine/core/config_builder/#idun_agent_engine.core.config_builder.ConfigBuilder","title":"<code>ConfigBuilder()</code>","text":"<p>A fluent builder for creating Idun Agent Engine configurations using Pydantic models.</p> <p>This class provides a convenient way to build strongly-typed configuration objects that are validated at creation time, ensuring consistency and catching errors early. It also handles agent initialization and management.</p> Example <p>config = (ConfigBuilder()          .with_api_port(8080)          .with_langgraph_agent(              name=\"My Agent\",              graph_definition=\"my_agent.py:graph\",              sqlite_checkpointer=\"agent.db\")          .build())</p> <p>app = create_app(config_dict=config.model_dump())</p> <p>Initialize a new configuration builder with default values.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>def __init__(self):\n    \"\"\"Initialize a new configuration builder with default values.\"\"\"\n    self._server_config = ServerConfig()\n    self._agent_config: AgentConfig | None = None\n</code></pre>"},{"location":"reference/idun_agent_engine/core/config_builder/#idun_agent_engine.core.config_builder.ConfigBuilder.build","title":"<code>build() -&gt; EngineConfig</code>","text":"<p>Build and return the complete configuration as a validated Pydantic model.</p> <p>Returns:</p> Name Type Description <code>EngineConfig</code> <code>EngineConfig</code> <p>The complete, validated configuration object</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the configuration is incomplete or invalid</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>def build(self) -&gt; EngineConfig:\n    \"\"\"Build and return the complete configuration as a validated Pydantic model.\n\n    Returns:\n        EngineConfig: The complete, validated configuration object\n\n    Raises:\n        ValueError: If the configuration is incomplete or invalid\n    \"\"\"\n    if not self._agent_config:\n        raise ValueError(\n            \"Agent configuration is required. Use with_langgraph_agent() or with_custom_agent()\"\n        )\n\n    # Create and validate the complete configuration\n    return EngineConfig(server=self._server_config, agent=self._agent_config)\n</code></pre>"},{"location":"reference/idun_agent_engine/core/config_builder/#idun_agent_engine.core.config_builder.ConfigBuilder.build_and_initialize_agent","title":"<code>build_and_initialize_agent() -&gt; BaseAgent</code>  <code>async</code>","text":"<p>Build configuration and initialize the agent in one step.</p> <p>Returns:</p> Name Type Description <code>BaseAgent</code> <code>BaseAgent</code> <p>Initialized agent instance</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If agent type is unsupported or configuration is invalid</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>async def build_and_initialize_agent(self) -&gt; BaseAgent:\n    \"\"\"Build configuration and initialize the agent in one step.\n\n    Returns:\n        BaseAgent: Initialized agent instance\n\n    Raises:\n        ValueError: If agent type is unsupported or configuration is invalid\n    \"\"\"\n    engine_config = self.build()\n    return await self.initialize_agent_from_config(engine_config)\n</code></pre>"},{"location":"reference/idun_agent_engine/core/config_builder/#idun_agent_engine.core.config_builder.ConfigBuilder.build_dict","title":"<code>build_dict() -&gt; dict[str, Any]</code>","text":"<p>Build and return the configuration as a dictionary.</p> <p>This is a convenience method for backward compatibility.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dict[str, Any]: The complete configuration dictionary</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>def build_dict(self) -&gt; dict[str, Any]:\n    \"\"\"Build and return the configuration as a dictionary.\n\n    This is a convenience method for backward compatibility.\n\n    Returns:\n        Dict[str, Any]: The complete configuration dictionary\n    \"\"\"\n    engine_config = self.build()\n    return engine_config.model_dump()\n</code></pre>"},{"location":"reference/idun_agent_engine/core/config_builder/#idun_agent_engine.core.config_builder.ConfigBuilder.from_dict","title":"<code>from_dict(config_dict: dict[str, Any]) -&gt; ConfigBuilder</code>  <code>classmethod</code>","text":"<p>Create a ConfigBuilder from an existing configuration dictionary.</p> <p>This method validates the input dictionary against the Pydantic models.</p> <p>Parameters:</p> Name Type Description Default <code>config_dict</code> <code>dict[str, Any]</code> <p>Existing configuration dictionary</p> required <p>Returns:</p> Name Type Description <code>ConfigBuilder</code> <code>ConfigBuilder</code> <p>A new builder instance with the provided configuration</p> <p>Raises:</p> Type Description <code>ValidationError</code> <p>If the configuration dictionary is invalid</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>@classmethod\ndef from_dict(cls, config_dict: dict[str, Any]) -&gt; \"ConfigBuilder\":\n    \"\"\"Create a ConfigBuilder from an existing configuration dictionary.\n\n    This method validates the input dictionary against the Pydantic models.\n\n    Args:\n        config_dict: Existing configuration dictionary\n\n    Returns:\n        ConfigBuilder: A new builder instance with the provided configuration\n\n    Raises:\n        ValidationError: If the configuration dictionary is invalid\n    \"\"\"\n    # Validate the entire config first\n    engine_config = EngineConfig.model_validate(config_dict)\n\n    # Create a new builder\n    builder = cls()\n    builder._server_config = engine_config.server\n    builder._agent_config = engine_config.agent\n\n    return builder\n</code></pre>"},{"location":"reference/idun_agent_engine/core/config_builder/#idun_agent_engine.core.config_builder.ConfigBuilder.from_engine_config","title":"<code>from_engine_config(engine_config: EngineConfig) -&gt; ConfigBuilder</code>  <code>classmethod</code>","text":"<p>Create a ConfigBuilder from an existing EngineConfig instance.</p> <p>Parameters:</p> Name Type Description Default <code>engine_config</code> <code>EngineConfig</code> <p>Existing EngineConfig instance</p> required <p>Returns:</p> Name Type Description <code>ConfigBuilder</code> <code>ConfigBuilder</code> <p>A new builder instance with the provided configuration</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>@classmethod\ndef from_engine_config(cls, engine_config: EngineConfig) -&gt; \"ConfigBuilder\":\n    \"\"\"Create a ConfigBuilder from an existing EngineConfig instance.\n\n    Args:\n        engine_config: Existing EngineConfig instance\n\n    Returns:\n        ConfigBuilder: A new builder instance with the provided configuration\n    \"\"\"\n    builder = cls()\n    builder._server_config = engine_config.server\n    builder._agent_config = engine_config.agent\n    return builder\n</code></pre>"},{"location":"reference/idun_agent_engine/core/config_builder/#idun_agent_engine.core.config_builder.ConfigBuilder.from_file","title":"<code>from_file(config_path: str = 'config.yaml') -&gt; ConfigBuilder</code>  <code>classmethod</code>","text":"<p>Create a ConfigBuilder from a YAML configuration file.</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>str</code> <p>Path to the configuration YAML file</p> <code>'config.yaml'</code> <p>Returns:</p> Name Type Description <code>ConfigBuilder</code> <code>ConfigBuilder</code> <p>A new builder instance with the loaded configuration</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>@classmethod\ndef from_file(cls, config_path: str = \"config.yaml\") -&gt; \"ConfigBuilder\":\n    \"\"\"Create a ConfigBuilder from a YAML configuration file.\n\n    Args:\n        config_path: Path to the configuration YAML file\n\n    Returns:\n        ConfigBuilder: A new builder instance with the loaded configuration\n    \"\"\"\n    engine_config = cls.load_from_file(config_path)\n    return cls.from_engine_config(engine_config)\n</code></pre>"},{"location":"reference/idun_agent_engine/core/config_builder/#idun_agent_engine.core.config_builder.ConfigBuilder.get_agent_class","title":"<code>get_agent_class(agent_type: str) -&gt; type[BaseAgent]</code>  <code>staticmethod</code>","text":"<p>Get the agent class for a given agent type without initializing it.</p> <p>Parameters:</p> Name Type Description Default <code>agent_type</code> <code>str</code> <p>The type of agent</p> required <p>Returns:</p> Type Description <code>type[BaseAgent]</code> <p>Type[BaseAgent]: The agent class</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If agent type is unsupported</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>@staticmethod\ndef get_agent_class(agent_type: str) -&gt; type[BaseAgent]:\n    \"\"\"Get the agent class for a given agent type without initializing it.\n\n    Args:\n        agent_type: The type of agent\n\n    Returns:\n        Type[BaseAgent]: The agent class\n\n    Raises:\n        ValueError: If agent type is unsupported\n    \"\"\"\n    if agent_type == \"langgraph\":\n        from ..agent.langgraph.langgraph import LanggraphAgent\n\n        return LanggraphAgent\n    elif agent_type == \"CREWAI\":\n        from ..agent.crewai.crewai import CrewAIAgent\n\n        return CrewAIAgent\n    # Future agent types can be added here:\n    # elif agent_type == \"crewai\":\n    #     from ..agent.crewai.agent import CrewAIAgent\n    #     return CrewAIAgent\n    else:\n        raise ValueError(f\"Unsupported agent type: {agent_type}\")\n</code></pre>"},{"location":"reference/idun_agent_engine/core/config_builder/#idun_agent_engine.core.config_builder.ConfigBuilder.initialize_agent_from_config","title":"<code>initialize_agent_from_config(engine_config: EngineConfig) -&gt; BaseAgent</code>  <code>async</code> <code>staticmethod</code>","text":"<p>Initialize an agent instance from a validated EngineConfig.</p> <p>Parameters:</p> Name Type Description Default <code>engine_config</code> <code>EngineConfig</code> <p>Validated configuration object</p> required <p>Returns:</p> Name Type Description <code>BaseAgent</code> <code>BaseAgent</code> <p>Initialized agent instance</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If agent type is unsupported</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>@staticmethod\nasync def initialize_agent_from_config(engine_config: EngineConfig) -&gt; BaseAgent:\n    \"\"\"Initialize an agent instance from a validated EngineConfig.\n\n    Args:\n        engine_config: Validated configuration object\n\n    Returns:\n        BaseAgent: Initialized agent instance\n\n    Raises:\n        ValueError: If agent type is unsupported\n    \"\"\"\n    agent_config_obj = engine_config.agent.config\n    print(engine_config)\n    agent_type = engine_config.agent.type\n\n    # Initialize the appropriate agent\n    agent_instance = None\n    if agent_type == \"langgraph\":\n        from idun_agent_engine.agent.langgraph.langgraph import LanggraphAgent\n\n        agent_instance = LanggraphAgent()\n    elif agent_type == \"CREWAI\":\n        from idun_agent_engine.agent.crewai.crewai import CrewAIAgent\n\n        agent_instance = CrewAIAgent()\n    # Future agent types can be added here:\n    # elif agent_type == \"crewai\":\n    #     from ..agent.crewai.agent import CrewAIAgent\n    #     agent_instance = CrewAIAgent()\n    # elif agent_type == \"autogen\":\n    #     from ..agent.autogen.agent import AutoGenAgent\n    #     agent_instance = AutoGenAgent()\n    else:\n        raise ValueError(f\"Unsupported agent type: {agent_type}\")\n\n    # Initialize the agent with its configuration\n    await agent_instance.initialize(agent_config_obj)  # type: ignore[arg-type]\n    return agent_instance\n</code></pre>"},{"location":"reference/idun_agent_engine/core/config_builder/#idun_agent_engine.core.config_builder.ConfigBuilder.load_and_initialize_agent","title":"<code>load_and_initialize_agent(config_path: str = 'config.yaml') -&gt; tuple[EngineConfig, BaseAgent]</code>  <code>async</code> <code>staticmethod</code>","text":"<p>Load configuration and initialize agent in one step.</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>str</code> <p>Path to the configuration YAML file</p> <code>'config.yaml'</code> <p>Returns:</p> Type Description <code>tuple[EngineConfig, BaseAgent]</code> <p>tuple[EngineConfig, BaseAgent]: Configuration and initialized agent</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>@staticmethod\nasync def load_and_initialize_agent(\n    config_path: str = \"config.yaml\",\n) -&gt; tuple[EngineConfig, BaseAgent]:\n    \"\"\"Load configuration and initialize agent in one step.\n\n    Args:\n        config_path: Path to the configuration YAML file\n\n    Returns:\n        tuple[EngineConfig, BaseAgent]: Configuration and initialized agent\n    \"\"\"\n    engine_config = ConfigBuilder.load_from_file(config_path)\n    agent = await ConfigBuilder.initialize_agent_from_config(engine_config)\n    return engine_config, agent\n</code></pre>"},{"location":"reference/idun_agent_engine/core/config_builder/#idun_agent_engine.core.config_builder.ConfigBuilder.load_from_file","title":"<code>load_from_file(config_path: str = 'config.yaml') -&gt; EngineConfig</code>  <code>staticmethod</code>","text":"<p>Load configuration from a YAML file and return a validated EngineConfig.</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>str</code> <p>Path to the configuration YAML file</p> <code>'config.yaml'</code> <p>Returns:</p> Name Type Description <code>EngineConfig</code> <code>EngineConfig</code> <p>Validated configuration object</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the configuration file doesn't exist</p> <code>ValidationError</code> <p>If the configuration is invalid</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>@staticmethod\ndef load_from_file(config_path: str = \"config.yaml\") -&gt; EngineConfig:\n    \"\"\"Load configuration from a YAML file and return a validated EngineConfig.\n\n    Args:\n        config_path: Path to the configuration YAML file\n\n    Returns:\n        EngineConfig: Validated configuration object\n\n    Raises:\n        FileNotFoundError: If the configuration file doesn't exist\n        ValidationError: If the configuration is invalid\n    \"\"\"\n    path = Path(config_path)\n    if not path.is_absolute():\n        # Resolve relative to the current working directory\n        path = Path.cwd() / path\n\n    with open(path) as f:\n        config_data = yaml.safe_load(f)\n\n    return EngineConfig.model_validate(config_data)\n</code></pre>"},{"location":"reference/idun_agent_engine/core/config_builder/#idun_agent_engine.core.config_builder.ConfigBuilder.resolve_config","title":"<code>resolve_config(config_path: str | None = None, config_dict: dict[str, Any] | None = None, engine_config: EngineConfig | None = None) -&gt; EngineConfig</code>  <code>staticmethod</code>","text":"<p>Umbrella function to resolve configuration from various sources.</p> <p>This function handles all the different ways configuration can be provided and returns a validated EngineConfig. It follows a priority order: 1. engine_config (pre-validated EngineConfig from ConfigBuilder) 2. config_dict (dictionary to be validated) 3. config_path (file path to load and validate) 4. default \"config.yaml\" file</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>str | None</code> <p>Path to a YAML configuration file</p> <code>None</code> <code>config_dict</code> <code>dict[str, Any] | None</code> <p>Dictionary containing configuration</p> <code>None</code> <code>engine_config</code> <code>EngineConfig | None</code> <p>Pre-validated EngineConfig instance</p> <code>None</code> <p>Returns:</p> Name Type Description <code>EngineConfig</code> <code>EngineConfig</code> <p>Validated configuration object</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If config file doesn't exist</p> <code>ValidationError</code> <p>If configuration is invalid</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>@staticmethod\ndef resolve_config(\n    config_path: str | None = None,\n    config_dict: dict[str, Any] | None = None,\n    engine_config: EngineConfig | None = None,\n) -&gt; EngineConfig:\n    \"\"\"Umbrella function to resolve configuration from various sources.\n\n    This function handles all the different ways configuration can be provided\n    and returns a validated EngineConfig. It follows a priority order:\n    1. engine_config (pre-validated EngineConfig from ConfigBuilder)\n    2. config_dict (dictionary to be validated)\n    3. config_path (file path to load and validate)\n    4. default \"config.yaml\" file\n\n    Args:\n        config_path: Path to a YAML configuration file\n        config_dict: Dictionary containing configuration\n        engine_config: Pre-validated EngineConfig instance\n\n    Returns:\n        EngineConfig: Validated configuration object\n\n    Raises:\n        FileNotFoundError: If config file doesn't exist\n        ValidationError: If configuration is invalid\n    \"\"\"\n    if engine_config:\n        # Use pre-validated EngineConfig (from ConfigBuilder)\n        print(\"\u2705 Using pre-validated EngineConfig\")\n        return engine_config\n    elif config_dict:\n        # Validate dictionary config\n        print(\"\u2705 Validated dictionary configuration\")\n        return EngineConfig.model_validate(config_dict)\n    elif config_path:\n        # Load from file using ConfigBuilder\n        print(f\"\u2705 Loaded configuration from {config_path}\")\n        return ConfigBuilder.load_from_file(config_path)\n    else:\n        # Default to loading config.yaml\n        print(\"\u2705 Loaded default configuration from config.yaml\")\n        return ConfigBuilder.load_from_file(\"config.yaml\")\n</code></pre>"},{"location":"reference/idun_agent_engine/core/config_builder/#idun_agent_engine.core.config_builder.ConfigBuilder.save_to_file","title":"<code>save_to_file(file_path: str) -&gt; None</code>","text":"<p>Save the configuration to a YAML file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path where to save the configuration file</p> required Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>def save_to_file(self, file_path: str) -&gt; None:\n    \"\"\"Save the configuration to a YAML file.\n\n    Args:\n        file_path: Path where to save the configuration file\n    \"\"\"\n    config = self.build_dict()\n    with open(file_path, \"w\") as f:\n        yaml.dump(config, f, default_flow_style=False, indent=2)\n</code></pre>"},{"location":"reference/idun_agent_engine/core/config_builder/#idun_agent_engine.core.config_builder.ConfigBuilder.validate_agent_config","title":"<code>validate_agent_config(agent_type: str, config: dict[str, Any]) -&gt; dict[str, Any]</code>  <code>staticmethod</code>","text":"<p>Validate agent configuration against the appropriate Pydantic model.</p> <p>Parameters:</p> Name Type Description Default <code>agent_type</code> <code>str</code> <p>The type of agent</p> required <code>config</code> <code>dict[str, Any]</code> <p>Configuration dictionary to validate</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dict[str, Any]: Validated configuration dictionary</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If agent type is unsupported or config is invalid</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>@staticmethod\ndef validate_agent_config(\n    agent_type: str, config: dict[str, Any]\n) -&gt; dict[str, Any]:\n    \"\"\"Validate agent configuration against the appropriate Pydantic model.\n\n    Args:\n        agent_type: The type of agent\n        config: Configuration dictionary to validate\n\n    Returns:\n        Dict[str, Any]: Validated configuration dictionary\n\n    Raises:\n        ValueError: If agent type is unsupported or config is invalid\n    \"\"\"\n    if agent_type == \"langgraph\":\n        validated_config = LangGraphAgentConfig.model_validate(config)\n        return validated_config.model_dump()\n    # Future agent types can be added here:\n    # elif agent_type == \"crewai\":\n    #     validated_config = CrewAIAgentConfig.model_validate(config)\n    #     return validated_config.model_dump()\n    else:\n        raise ValueError(f\"Unsupported agent type: {agent_type}\")\n</code></pre>"},{"location":"reference/idun_agent_engine/core/config_builder/#idun_agent_engine.core.config_builder.ConfigBuilder.with_api_port","title":"<code>with_api_port(port: int) -&gt; ConfigBuilder</code>","text":"<p>Set the API port for the server.</p> <p>Parameters:</p> Name Type Description Default <code>port</code> <code>int</code> <p>The port number to bind the server to</p> required <p>Returns:</p> Name Type Description <code>ConfigBuilder</code> <code>ConfigBuilder</code> <p>This builder instance for method chaining</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>def with_api_port(self, port: int) -&gt; \"ConfigBuilder\":\n    \"\"\"Set the API port for the server.\n\n    Args:\n        port: The port number to bind the server to\n\n    Returns:\n        ConfigBuilder: This builder instance for method chaining\n    \"\"\"\n    # Create new API config with updated port\n    api_config = ServerAPIConfig(port=port)\n    self._server_config = ServerConfig(\n        api=api_config,\n    )\n    return self\n</code></pre>"},{"location":"reference/idun_agent_engine/core/config_builder/#idun_agent_engine.core.config_builder.ConfigBuilder.with_custom_agent","title":"<code>with_custom_agent(agent_type: str, config: dict[str, Any]) -&gt; ConfigBuilder</code>","text":"<p>Configure a custom agent type.</p> <p>This method allows for configuring agent types that don't have dedicated builder methods yet. The config will be validated when the AgentConfig is created.</p> <p>Parameters:</p> Name Type Description Default <code>agent_type</code> <code>str</code> <p>The type of agent (e.g., \"crewai\", \"autogen\")</p> required <code>config</code> <code>dict[str, Any]</code> <p>Configuration dictionary specific to the agent type</p> required <p>Returns:</p> Name Type Description <code>ConfigBuilder</code> <code>ConfigBuilder</code> <p>This builder instance for method chaining</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>def with_custom_agent(\n    self, agent_type: str, config: dict[str, Any]\n) -&gt; \"ConfigBuilder\":\n    \"\"\"Configure a custom agent type.\n\n    This method allows for configuring agent types that don't have\n    dedicated builder methods yet. The config will be validated\n    when the AgentConfig is created.\n\n    Args:\n        agent_type: The type of agent (e.g., \"crewai\", \"autogen\")\n        config: Configuration dictionary specific to the agent type\n\n    Returns:\n        ConfigBuilder: This builder instance for method chaining\n    \"\"\"\n    if agent_type == \"langgraph\":\n        self._agent_config = AgentConfig(\n            type=\"langgraph\",\n            config=LangGraphAgentConfig.model_validate(config)\n        )\n    # elif agent_type == \"ADK\":\n    #     self._agent_config = ADKAgentSpec(\n    #         type=\"ADK\", config=BaseAgentConfig.model_validate(config)\n    #     )\n    # elif agent_type == \"CREWAI\":\n    #     self._agent_config = CrewAIAgentSpec(\n    #         type=\"CREWAI\", config=BaseAgentConfig.model_validate(config)\n    #     )\n    else:\n        raise ValueError(f\"Unsupported agent type: {agent_type}\")\n    return self\n</code></pre>"},{"location":"reference/idun_agent_engine/core/config_builder/#idun_agent_engine.core.config_builder.ConfigBuilder.with_langgraph_agent","title":"<code>with_langgraph_agent(name: str, graph_definition: str, sqlite_checkpointer: str | None = None, **additional_config) -&gt; ConfigBuilder</code>","text":"<p>Configure a LangGraph agent using the LangGraphAgentConfig model.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Human-readable name for the agent</p> required <code>graph_definition</code> <code>str</code> <p>Path to the graph in format \"module.py:variable_name\"</p> required <code>sqlite_checkpointer</code> <code>str | None</code> <p>Optional path to SQLite database for checkpointing</p> <code>None</code> <code>**additional_config</code> <p>Additional configuration parameters</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>ConfigBuilder</code> <code>ConfigBuilder</code> <p>This builder instance for method chaining</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>def with_langgraph_agent(\n    self,\n    name: str,\n    graph_definition: str,\n    sqlite_checkpointer: str | None = None,\n    **additional_config,\n) -&gt; \"ConfigBuilder\":\n    \"\"\"Configure a LangGraph agent using the LangGraphAgentConfig model.\n\n    Args:\n        name: Human-readable name for the agent\n        graph_definition: Path to the graph in format \"module.py:variable_name\"\n        sqlite_checkpointer: Optional path to SQLite database for checkpointing\n        **additional_config: Additional configuration parameters\n\n    Returns:\n        ConfigBuilder: This builder instance for method chaining\n    \"\"\"\n    # Build the agent config dictionary\n    agent_config_dict = {\n        \"name\": name,\n        \"graph_definition\": graph_definition,\n        **additional_config,\n    }\n\n    # Add checkpointer if specified\n    if sqlite_checkpointer:\n        checkpointer = SqliteCheckpointConfig(\n            type=\"sqlite\", db_url=f\"sqlite:///{sqlite_checkpointer}\"\n        )\n        agent_config_dict[\"checkpointer\"] = checkpointer\n\n    # Create and validate the LangGraph config\n    langgraph_config = LangGraphAgentConfig.model_validate(agent_config_dict)\n\n    # Create the agent config (store as strongly-typed model, not dict)\n    self._agent_config = AgentConfig(type=\"langgraph\", config=langgraph_config)\n    return self\n</code></pre>"},{"location":"reference/idun_agent_engine/core/config_builder/#idun_agent_engine.core.config_builder.ConfigBuilder.with_server_config","title":"<code>with_server_config(api_port: int | None = None, telemetry_provider: str | None = None) -&gt; ConfigBuilder</code>","text":"<p>Set server configuration options directly.</p> <p>Parameters:</p> Name Type Description Default <code>api_port</code> <code>int | None</code> <p>Optional API port</p> <code>None</code> <code>telemetry_provider</code> <code>str | None</code> <p>Optional telemetry provider</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ConfigBuilder</code> <code>ConfigBuilder</code> <p>This builder instance for method chaining</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/config_builder.py</code> <pre><code>def with_server_config(\n    self, api_port: int | None = None, telemetry_provider: str | None = None\n) -&gt; \"ConfigBuilder\":\n    \"\"\"Set server configuration options directly.\n\n    Args:\n        api_port: Optional API port\n        telemetry_provider: Optional telemetry provider\n\n    Returns:\n        ConfigBuilder: This builder instance for method chaining\n    \"\"\"\n    api_config = (\n        ServerAPIConfig(port=api_port) if api_port else self._server_config.api\n    )\n\n    self._server_config = ServerConfig(api=api_config)\n    return self\n</code></pre>"},{"location":"reference/idun_agent_engine/core/engine_config/","title":"idun_agent_engine.core.engine_config","text":""},{"location":"reference/idun_agent_engine/core/engine_config/#idun_agent_engine.core.engine_config","title":"<code>idun_agent_engine.core.engine_config</code>","text":"<p>Engine Configuration for Idun Agent Engine.</p> <p>This module contains the core configuration models for the entire Engine engine. These models define the overall structure and validation for the complete system.</p>"},{"location":"reference/idun_agent_engine/core/engine_config/#idun_agent_engine.core.engine_config.AgentConfig","title":"<code>AgentConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for agent specification and settings.</p>"},{"location":"reference/idun_agent_engine/core/engine_config/#idun_agent_engine.core.engine_config.EngineConfig","title":"<code>EngineConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Main engine configuration model for the entire Idun Agent Engine.</p> <p>This is the top-level configuration that encompasses both server settings and agent configuration. It represents the complete system configuration loaded from config.yaml files or built programmatically.</p>"},{"location":"reference/idun_agent_engine/core/server_runner/","title":"idun_agent_engine.core.server_runner","text":""},{"location":"reference/idun_agent_engine/core/server_runner/#idun_agent_engine.core.server_runner","title":"<code>idun_agent_engine.core.server_runner</code>","text":"<p>Server Runner for Idun Agent Engine.</p> <p>This module provides convenient functions to run FastAPI applications created with the Idun Agent Engine. It handles common deployment scenarios and provides sensible defaults.</p>"},{"location":"reference/idun_agent_engine/core/server_runner/#idun_agent_engine.core.server_runner.run_server","title":"<code>run_server(app: FastAPI, host: str = '0.0.0.0', port: int = 8000, reload: bool = False, log_level: str = 'info', workers: int | None = None) -&gt; None</code>","text":"<p>Run a FastAPI application created with Idun Agent Engine.</p> <p>This is a convenience function that wraps uvicorn.run() with sensible defaults for serving agent applications. It automatically handles common deployment scenarios.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>FastAPI</code> <p>The FastAPI application created with create_app()</p> required <code>host</code> <code>str</code> <p>Host to bind the server to. Defaults to \"0.0.0.0\" (all interfaces)</p> <code>'0.0.0.0'</code> <code>port</code> <code>int</code> <p>Port to bind the server to. Defaults to 8000</p> <code>8000</code> <code>reload</code> <code>bool</code> <p>Enable auto-reload for development. Defaults to False</p> <code>False</code> <code>log_level</code> <code>str</code> <p>Logging level. Defaults to \"info\"</p> <code>'info'</code> <code>workers</code> <code>int | None</code> <p>Number of worker processes. If None, uses single process</p> <code>None</code> Example <p>from idun_agent_engine import create_app, run_server</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/server_runner.py</code> <pre><code>def run_server(\n    app: FastAPI,\n    host: str = \"0.0.0.0\",\n    port: int = 8000,\n    reload: bool = False,\n    log_level: str = \"info\",\n    workers: int | None = None,\n) -&gt; None:\n    \"\"\"Run a FastAPI application created with Idun Agent Engine.\n\n    This is a convenience function that wraps uvicorn.run() with sensible defaults\n    for serving agent applications. It automatically handles common deployment scenarios.\n\n    Args:\n        app: The FastAPI application created with create_app()\n        host: Host to bind the server to. Defaults to \"0.0.0.0\" (all interfaces)\n        port: Port to bind the server to. Defaults to 8000\n        reload: Enable auto-reload for development. Defaults to False\n        log_level: Logging level. Defaults to \"info\"\n        workers: Number of worker processes. If None, uses single process\n\n    Example:\n        from idun_agent_engine import create_app, run_server\n\n        # Create your app\n        app = create_app(\"config.yaml\")\n\n        # Run in development mode\n        run_server(app, reload=True)\n\n        # Run in production mode\n        run_server(app, workers=4)\n    \"\"\"\n    print(f\"\ud83c\udf10 Starting Idun Agent Engine server on http://{host}:{port}\")\n    print(f\"\ud83d\udcda API documentation available at http://{host}:{port}/docs\")\n\n    if reload and workers:\n        print(\n            \"\u26a0\ufe0f  Warning: reload=True is incompatible with workers &gt; 1. Disabling reload.\"\n        )\n        reload = False\n\n    uvicorn.run(\n        app,\n        host=host,\n        port=port,\n        # reload=reload,\n        log_level=log_level,\n        # workers=workers\n    )\n</code></pre>"},{"location":"reference/idun_agent_engine/core/server_runner/#idun_agent_engine.core.server_runner.run_server--create-your-app","title":"Create your app","text":"<p>app = create_app(\"config.yaml\")</p>"},{"location":"reference/idun_agent_engine/core/server_runner/#idun_agent_engine.core.server_runner.run_server--run-in-development-mode","title":"Run in development mode","text":"<p>run_server(app, reload=True)</p>"},{"location":"reference/idun_agent_engine/core/server_runner/#idun_agent_engine.core.server_runner.run_server--run-in-production-mode","title":"Run in production mode","text":"<p>run_server(app, workers=4)</p>"},{"location":"reference/idun_agent_engine/core/server_runner/#idun_agent_engine.core.server_runner.run_server_from_builder","title":"<code>run_server_from_builder(config_builder, **kwargs) -&gt; None</code>","text":"<p>Create and run a server directly from a ConfigBuilder instance.</p> <p>This allows for programmatic configuration with immediate server startup.</p> <p>Parameters:</p> Name Type Description Default <code>config_builder</code> <p>ConfigBuilder instance (can be built or unbuilt)</p> required <code>**kwargs</code> <p>Additional arguments passed to run_server()</p> <code>{}</code> Example <p>from idun_agent_engine import ConfigBuilder</p> <p>builder = (ConfigBuilder()           .with_langgraph_agent(name=\"My Agent\", graph_definition=\"agent.py:graph\")           .with_api_port(8080))</p> <p>run_server_from_builder(builder, reload=True)</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/server_runner.py</code> <pre><code>def run_server_from_builder(config_builder, **kwargs) -&gt; None:\n    \"\"\"Create and run a server directly from a ConfigBuilder instance.\n\n    This allows for programmatic configuration with immediate server startup.\n\n    Args:\n        config_builder: ConfigBuilder instance (can be built or unbuilt)\n        **kwargs: Additional arguments passed to run_server()\n\n    Example:\n        from idun_agent_engine import ConfigBuilder\n\n        builder = (ConfigBuilder()\n                  .with_langgraph_agent(name=\"My Agent\", graph_definition=\"agent.py:graph\")\n                  .with_api_port(8080))\n\n        run_server_from_builder(builder, reload=True)\n    \"\"\"\n    from .app_factory import create_app\n\n    # Build the configuration if it's a ConfigBuilder instance\n    if hasattr(config_builder, \"build\"):\n        engine_config = config_builder.build()\n    else:\n        # Assume it's already an EngineConfig\n        engine_config = config_builder\n\n    # Create app with the config\n    app = create_app(engine_config=engine_config)\n\n    # Extract port from config if not overridden\n    if \"port\" not in kwargs:\n        kwargs[\"port\"] = engine_config.server.api.port\n\n    # Show configuration info\n    print(\"\ud83d\udd27 Using programmatic configuration\")\n    agent_name = (\n        engine_config.agent.config.get(\"name\")  # type: ignore[call-arg, index]\n        if hasattr(engine_config.agent.config, \"get\")\n        else getattr(engine_config.agent.config, \"name\", \"Unknown\")\n    )\n    print(f\"\ud83e\udd16 Agent: {agent_name} ({engine_config.agent.type})\")\n\n    run_server(app, **kwargs)\n</code></pre>"},{"location":"reference/idun_agent_engine/core/server_runner/#idun_agent_engine.core.server_runner.run_server_from_config","title":"<code>run_server_from_config(config_path: str = 'config.yaml', **kwargs) -&gt; None</code>","text":"<p>Create and run a server directly from a configuration file.</p> <p>This is the most convenient way to start a server - it combines create_app() and run_server() in a single function call using ConfigBuilder.</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>str</code> <p>Path to the configuration YAML file</p> <code>'config.yaml'</code> <code>**kwargs</code> <p>Additional arguments passed to run_server()</p> <code>{}</code> Example Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/core/server_runner.py</code> <pre><code>def run_server_from_config(config_path: str = \"config.yaml\", **kwargs) -&gt; None:\n    \"\"\"Create and run a server directly from a configuration file.\n\n    This is the most convenient way to start a server - it combines create_app()\n    and run_server() in a single function call using ConfigBuilder.\n\n    Args:\n        config_path: Path to the configuration YAML file\n        **kwargs: Additional arguments passed to run_server()\n\n    Example:\n        # Run server directly from config\n        run_server_from_config(\"my_agent.yaml\", port=8080, reload=True)\n    \"\"\"\n    from .app_factory import create_app\n    from .config_builder import ConfigBuilder\n\n    # Load configuration using ConfigBuilder\n    engine_config = ConfigBuilder.load_from_file(config_path)\n\n    # Create app with the loaded config\n    app = create_app(engine_config=engine_config)\n\n    # Extract port from config if not overridden\n    if \"port\" not in kwargs:\n        kwargs[\"port\"] = engine_config.server.api.port\n\n    # Show configuration info\n    print(f\"\ud83d\udd27 Loaded configuration from {config_path}\")\n    # Best-effort: handle both dict-like and model access\n    agent_name = (\n        engine_config.agent.config.get(\"name\")  # type: ignore[call-arg, index]\n        if hasattr(engine_config.agent.config, \"get\")\n        else getattr(engine_config.agent.config, \"name\", \"Unknown\")\n    )\n    print(f\"\ud83e\udd16 Agent: {agent_name} ({engine_config.agent.type})\")\n\n    run_server(app, **kwargs)\n</code></pre>"},{"location":"reference/idun_agent_engine/core/server_runner/#idun_agent_engine.core.server_runner.run_server_from_config--run-server-directly-from-config","title":"Run server directly from config","text":"<p>run_server_from_config(\"my_agent.yaml\", port=8080, reload=True)</p>"},{"location":"reference/idun_agent_engine/observability/","title":"idun_agent_engine.observability","text":""},{"location":"reference/idun_agent_engine/observability/#idun_agent_engine.observability","title":"<code>idun_agent_engine.observability</code>","text":"<p>Observability package providing provider-agnostic tracing interfaces.</p>"},{"location":"reference/idun_agent_engine/observability/#idun_agent_engine.observability.ObservabilityConfig","title":"<code>ObservabilityConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Provider-agnostic observability configuration based on Pydantic.</p> Example YAML <p>observability:   provider: \"langfuse\"  # or \"phoenix\"   enabled: true   options:     host: ${LANGFUSE_HOST}     public_key: ${LANGFUSE_PUBLIC_KEY}     secret_key: ${LANGFUSE_SECRET_KEY}     run_name: \"my-run\"</p>"},{"location":"reference/idun_agent_engine/observability/#idun_agent_engine.observability.ObservabilityConfig.resolved","title":"<code>resolved() -&gt; ObservabilityConfig</code>","text":"<p>Return a copy with env placeholders resolved in options.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/model.py</code> <pre><code>def resolved(self) -&gt; ObservabilityConfig:\n    \"\"\"Return a copy with env placeholders resolved in options.\"\"\"\n    resolved_options = self._resolve_value(self.options)\n    return ObservabilityConfig(\n        provider=self.provider,\n        enabled=self.enabled,\n        options=resolved_options,\n    )\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/#idun_agent_engine.observability.ObservabilityHandlerBase","title":"<code>ObservabilityHandlerBase(options: dict[str, Any] | None = None)</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for observability handlers.</p> <p>Concrete implementations must provide provider name and callbacks.</p> <p>Initialize handler with provider-specific options.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/base.py</code> <pre><code>def __init__(self, options: dict[str, Any] | None = None) -&gt; None:\n    \"\"\"Initialize handler with provider-specific options.\"\"\"\n    self.options: dict[str, Any] = options or {}\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/#idun_agent_engine.observability.ObservabilityHandlerBase.get_callbacks","title":"<code>get_callbacks() -&gt; list[Any]</code>  <code>abstractmethod</code>","text":"<p>Return a list of callbacks (can be empty).</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/base.py</code> <pre><code>@abstractmethod\ndef get_callbacks(self) -&gt; list[Any]:\n    \"\"\"Return a list of callbacks (can be empty).\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/#idun_agent_engine.observability.ObservabilityHandlerBase.get_run_name","title":"<code>get_run_name() -&gt; str | None</code>","text":"<p>Optional run name used by frameworks that support it.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/base.py</code> <pre><code>def get_run_name(self) -&gt; str | None:\n    \"\"\"Optional run name used by frameworks that support it.\"\"\"\n    run_name = self.options.get(\"run_name\")\n    return run_name if isinstance(run_name, str) else None\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/#idun_agent_engine.observability.create_observability_handler","title":"<code>create_observability_handler(config: ObservabilityConfig | dict[str, Any] | None) -&gt; tuple[ObservabilityHandlerBase | None, dict[str, Any] | None]</code>","text":"<p>Factory to create an observability handler based on provider.</p> <p>Accepts either an <code>ObservabilityConfig</code> or a raw dict. Returns (handler, info_dict). info_dict can be attached to agent infos for debugging.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/base.py</code> <pre><code>def create_observability_handler(\n    config: ObservabilityConfig | dict[str, Any] | None,\n) -&gt; tuple[ObservabilityHandlerBase | None, dict[str, Any] | None]:\n    \"\"\"Factory to create an observability handler based on provider.\n\n    Accepts either an `ObservabilityConfig` or a raw dict.\n    Returns (handler, info_dict). info_dict can be attached to agent infos for debugging.\n    \"\"\"\n    normalized = _normalize_config(config)\n    provider = normalized.get(\"provider\")\n    enabled = normalized.get(\"enabled\", False)\n    options: dict[str, Any] = normalized.get(\"options\", {})\n\n    if not enabled or not provider:\n        return None, {\"enabled\": False}\n\n    if provider == \"langfuse\":\n        from .langfuse.langfuse_handler import LangfuseHandler\n\n        handler = LangfuseHandler(options)\n        return handler, {\n            \"enabled\": True,\n            \"provider\": \"langfuse\",\n            \"host\": os.getenv(\"LANGFUSE_HOST\"),\n            \"run_name\": handler.get_run_name(),\n        }\n\n    if provider == \"phoenix\":\n        from .phoenix.phoenix_handler import PhoenixHandler\n\n        handler = PhoenixHandler(options)\n        info: dict[str, Any] = {\n            \"enabled\": True,\n            \"provider\": \"phoenix\",\n            \"collector\": os.getenv(\"PHOENIX_COLLECTOR_ENDPOINT\"),\n        }\n        project_name = getattr(handler, \"project_name\", None)\n        if project_name:\n            info[\"project_name\"] = project_name\n        return handler, info\n\n    return None, {\n        \"enabled\": False,\n        \"provider\": provider,\n        \"error\": \"Unsupported provider\",\n    }\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/base/","title":"idun_agent_engine.observability.base","text":""},{"location":"reference/idun_agent_engine/observability/base/#idun_agent_engine.observability.base","title":"<code>idun_agent_engine.observability.base</code>","text":"<p>Observability base classes and factory functions.</p> <p>Defines the provider-agnostic interface and a factory to create handlers.</p>"},{"location":"reference/idun_agent_engine/observability/base/#idun_agent_engine.observability.base.ObservabilityHandlerBase","title":"<code>ObservabilityHandlerBase(options: dict[str, Any] | None = None)</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for observability handlers.</p> <p>Concrete implementations must provide provider name and callbacks.</p> <p>Initialize handler with provider-specific options.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/base.py</code> <pre><code>def __init__(self, options: dict[str, Any] | None = None) -&gt; None:\n    \"\"\"Initialize handler with provider-specific options.\"\"\"\n    self.options: dict[str, Any] = options or {}\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/base/#idun_agent_engine.observability.base.ObservabilityHandlerBase.get_callbacks","title":"<code>get_callbacks() -&gt; list[Any]</code>  <code>abstractmethod</code>","text":"<p>Return a list of callbacks (can be empty).</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/base.py</code> <pre><code>@abstractmethod\ndef get_callbacks(self) -&gt; list[Any]:\n    \"\"\"Return a list of callbacks (can be empty).\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/base/#idun_agent_engine.observability.base.ObservabilityHandlerBase.get_run_name","title":"<code>get_run_name() -&gt; str | None</code>","text":"<p>Optional run name used by frameworks that support it.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/base.py</code> <pre><code>def get_run_name(self) -&gt; str | None:\n    \"\"\"Optional run name used by frameworks that support it.\"\"\"\n    run_name = self.options.get(\"run_name\")\n    return run_name if isinstance(run_name, str) else None\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/base/#idun_agent_engine.observability.base.create_observability_handler","title":"<code>create_observability_handler(config: ObservabilityConfig | dict[str, Any] | None) -&gt; tuple[ObservabilityHandlerBase | None, dict[str, Any] | None]</code>","text":"<p>Factory to create an observability handler based on provider.</p> <p>Accepts either an <code>ObservabilityConfig</code> or a raw dict. Returns (handler, info_dict). info_dict can be attached to agent infos for debugging.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/base.py</code> <pre><code>def create_observability_handler(\n    config: ObservabilityConfig | dict[str, Any] | None,\n) -&gt; tuple[ObservabilityHandlerBase | None, dict[str, Any] | None]:\n    \"\"\"Factory to create an observability handler based on provider.\n\n    Accepts either an `ObservabilityConfig` or a raw dict.\n    Returns (handler, info_dict). info_dict can be attached to agent infos for debugging.\n    \"\"\"\n    normalized = _normalize_config(config)\n    provider = normalized.get(\"provider\")\n    enabled = normalized.get(\"enabled\", False)\n    options: dict[str, Any] = normalized.get(\"options\", {})\n\n    if not enabled or not provider:\n        return None, {\"enabled\": False}\n\n    if provider == \"langfuse\":\n        from .langfuse.langfuse_handler import LangfuseHandler\n\n        handler = LangfuseHandler(options)\n        return handler, {\n            \"enabled\": True,\n            \"provider\": \"langfuse\",\n            \"host\": os.getenv(\"LANGFUSE_HOST\"),\n            \"run_name\": handler.get_run_name(),\n        }\n\n    if provider == \"phoenix\":\n        from .phoenix.phoenix_handler import PhoenixHandler\n\n        handler = PhoenixHandler(options)\n        info: dict[str, Any] = {\n            \"enabled\": True,\n            \"provider\": \"phoenix\",\n            \"collector\": os.getenv(\"PHOENIX_COLLECTOR_ENDPOINT\"),\n        }\n        project_name = getattr(handler, \"project_name\", None)\n        if project_name:\n            info[\"project_name\"] = project_name\n        return handler, info\n\n    return None, {\n        \"enabled\": False,\n        \"provider\": provider,\n        \"error\": \"Unsupported provider\",\n    }\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/model/","title":"idun_agent_engine.observability.model","text":""},{"location":"reference/idun_agent_engine/observability/model/#idun_agent_engine.observability.model","title":"<code>idun_agent_engine.observability.model</code>","text":"<p>Provider-agnostic observability configuration model.</p>"},{"location":"reference/idun_agent_engine/observability/model/#idun_agent_engine.observability.model.ObservabilityConfig","title":"<code>ObservabilityConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Provider-agnostic observability configuration based on Pydantic.</p> Example YAML <p>observability:   provider: \"langfuse\"  # or \"phoenix\"   enabled: true   options:     host: ${LANGFUSE_HOST}     public_key: ${LANGFUSE_PUBLIC_KEY}     secret_key: ${LANGFUSE_SECRET_KEY}     run_name: \"my-run\"</p>"},{"location":"reference/idun_agent_engine/observability/model/#idun_agent_engine.observability.model.ObservabilityConfig.resolved","title":"<code>resolved() -&gt; ObservabilityConfig</code>","text":"<p>Return a copy with env placeholders resolved in options.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/model.py</code> <pre><code>def resolved(self) -&gt; ObservabilityConfig:\n    \"\"\"Return a copy with env placeholders resolved in options.\"\"\"\n    resolved_options = self._resolve_value(self.options)\n    return ObservabilityConfig(\n        provider=self.provider,\n        enabled=self.enabled,\n        options=resolved_options,\n    )\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/utils/","title":"idun_agent_engine.observability.utils","text":""},{"location":"reference/idun_agent_engine/observability/utils/#idun_agent_engine.observability.utils","title":"<code>idun_agent_engine.observability.utils</code>","text":"<p>Utility helpers for observability configuration.</p> <p>Functions here help resolve environment placeholders like ${VAR} or $VAR.</p>"},{"location":"reference/idun_agent_engine/observability/langfuse/","title":"idun_agent_engine.observability.langfuse","text":""},{"location":"reference/idun_agent_engine/observability/langfuse/#idun_agent_engine.observability.langfuse","title":"<code>idun_agent_engine.observability.langfuse</code>","text":"<p>Langfuse observability integration package.</p>"},{"location":"reference/idun_agent_engine/observability/langfuse/#idun_agent_engine.observability.langfuse.LangfuseHandler","title":"<code>LangfuseHandler(options: dict[str, Any] | None = None)</code>","text":"<p>               Bases: <code>ObservabilityHandlerBase</code></p> <p>Langfuse handler providing LangChain callbacks and client setup.</p> <p>Initialize handler, resolving env and preparing callbacks.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/langfuse/langfuse_handler.py</code> <pre><code>def __init__(self, options: dict[str, Any] | None = None):\n    \"\"\"Initialize handler, resolving env and preparing callbacks.\"\"\"\n    super().__init__(options)\n    opts = self.options\n\n    # Resolve and set env vars as required by Langfuse\n    host = self._resolve_env(opts.get(\"host\")) or os.getenv(\"LANGFUSE_HOST\")\n    public_key = self._resolve_env(opts.get(\"public_key\")) or os.getenv(\n        \"LANGFUSE_PUBLIC_KEY\"\n    )\n    secret_key = self._resolve_env(opts.get(\"secret_key\")) or os.getenv(\n        \"LANGFUSE_SECRET_KEY\"\n    )\n\n    if host:\n        os.environ[\"LANGFUSE_HOST\"] = host\n    if public_key:\n        os.environ[\"LANGFUSE_PUBLIC_KEY\"] = public_key\n    if secret_key:\n        os.environ[\"LANGFUSE_SECRET_KEY\"] = secret_key\n\n    # Instantiate callback handler lazily to avoid hard dep if not installed\n    self._callbacks: list[Any] = []\n    self._langfuse_client = None\n    try:\n        from langfuse import get_client\n        from langfuse.langchain import CallbackHandler\n\n        self._langfuse_client = get_client()\n\n        try:\n            if self._langfuse_client.auth_check():\n                print(\"Langfuse client is authenticated and ready!\")\n            else:\n                print(\n                    \"Authentication failed. Please check your credentials and host.\"\n                )\n        except Exception:\n            pass\n\n        self._callbacks = [CallbackHandler()]\n    except Exception:\n        self._callbacks = []\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/langfuse/#idun_agent_engine.observability.langfuse.LangfuseHandler.get_callbacks","title":"<code>get_callbacks() -&gt; list[Any]</code>","text":"<p>Return LangChain-compatible callback handlers (if available).</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/langfuse/langfuse_handler.py</code> <pre><code>def get_callbacks(self) -&gt; list[Any]:\n    \"\"\"Return LangChain-compatible callback handlers (if available).\"\"\"\n    return self._callbacks\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/langfuse/#idun_agent_engine.observability.langfuse.LangfuseHandler.get_client","title":"<code>get_client()</code>","text":"<p>Return underlying Langfuse client instance (if created).</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/langfuse/langfuse_handler.py</code> <pre><code>def get_client(self):\n    \"\"\"Return underlying Langfuse client instance (if created).\"\"\"\n    return self._langfuse_client\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/langfuse/#idun_agent_engine.observability.langfuse.LangfuseHandler.get_run_name","title":"<code>get_run_name() -&gt; str | None</code>","text":"<p>Optional run name used by frameworks that support it.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/base.py</code> <pre><code>def get_run_name(self) -&gt; str | None:\n    \"\"\"Optional run name used by frameworks that support it.\"\"\"\n    run_name = self.options.get(\"run_name\")\n    return run_name if isinstance(run_name, str) else None\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/langfuse/langfuse_handler/","title":"idun_agent_engine.observability.langfuse.langfuse_handler","text":""},{"location":"reference/idun_agent_engine/observability/langfuse/langfuse_handler/#idun_agent_engine.observability.langfuse.langfuse_handler","title":"<code>idun_agent_engine.observability.langfuse.langfuse_handler</code>","text":"<p>Langfuse observability handler implementation.</p>"},{"location":"reference/idun_agent_engine/observability/langfuse/langfuse_handler/#idun_agent_engine.observability.langfuse.langfuse_handler.LangfuseHandler","title":"<code>LangfuseHandler(options: dict[str, Any] | None = None)</code>","text":"<p>               Bases: <code>ObservabilityHandlerBase</code></p> <p>Langfuse handler providing LangChain callbacks and client setup.</p> <p>Initialize handler, resolving env and preparing callbacks.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/langfuse/langfuse_handler.py</code> <pre><code>def __init__(self, options: dict[str, Any] | None = None):\n    \"\"\"Initialize handler, resolving env and preparing callbacks.\"\"\"\n    super().__init__(options)\n    opts = self.options\n\n    # Resolve and set env vars as required by Langfuse\n    host = self._resolve_env(opts.get(\"host\")) or os.getenv(\"LANGFUSE_HOST\")\n    public_key = self._resolve_env(opts.get(\"public_key\")) or os.getenv(\n        \"LANGFUSE_PUBLIC_KEY\"\n    )\n    secret_key = self._resolve_env(opts.get(\"secret_key\")) or os.getenv(\n        \"LANGFUSE_SECRET_KEY\"\n    )\n\n    if host:\n        os.environ[\"LANGFUSE_HOST\"] = host\n    if public_key:\n        os.environ[\"LANGFUSE_PUBLIC_KEY\"] = public_key\n    if secret_key:\n        os.environ[\"LANGFUSE_SECRET_KEY\"] = secret_key\n\n    # Instantiate callback handler lazily to avoid hard dep if not installed\n    self._callbacks: list[Any] = []\n    self._langfuse_client = None\n    try:\n        from langfuse import get_client\n        from langfuse.langchain import CallbackHandler\n\n        self._langfuse_client = get_client()\n\n        try:\n            if self._langfuse_client.auth_check():\n                print(\"Langfuse client is authenticated and ready!\")\n            else:\n                print(\n                    \"Authentication failed. Please check your credentials and host.\"\n                )\n        except Exception:\n            pass\n\n        self._callbacks = [CallbackHandler()]\n    except Exception:\n        self._callbacks = []\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/langfuse/langfuse_handler/#idun_agent_engine.observability.langfuse.langfuse_handler.LangfuseHandler.get_callbacks","title":"<code>get_callbacks() -&gt; list[Any]</code>","text":"<p>Return LangChain-compatible callback handlers (if available).</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/langfuse/langfuse_handler.py</code> <pre><code>def get_callbacks(self) -&gt; list[Any]:\n    \"\"\"Return LangChain-compatible callback handlers (if available).\"\"\"\n    return self._callbacks\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/langfuse/langfuse_handler/#idun_agent_engine.observability.langfuse.langfuse_handler.LangfuseHandler.get_client","title":"<code>get_client()</code>","text":"<p>Return underlying Langfuse client instance (if created).</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/langfuse/langfuse_handler.py</code> <pre><code>def get_client(self):\n    \"\"\"Return underlying Langfuse client instance (if created).\"\"\"\n    return self._langfuse_client\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/langfuse/langfuse_handler/#idun_agent_engine.observability.langfuse.langfuse_handler.LangfuseHandler.get_run_name","title":"<code>get_run_name() -&gt; str | None</code>","text":"<p>Optional run name used by frameworks that support it.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/base.py</code> <pre><code>def get_run_name(self) -&gt; str | None:\n    \"\"\"Optional run name used by frameworks that support it.\"\"\"\n    run_name = self.options.get(\"run_name\")\n    return run_name if isinstance(run_name, str) else None\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/phoenix/","title":"idun_agent_engine.observability.phoenix","text":""},{"location":"reference/idun_agent_engine/observability/phoenix/#idun_agent_engine.observability.phoenix","title":"<code>idun_agent_engine.observability.phoenix</code>","text":"<p>Arize Phoenix observability integration package.</p>"},{"location":"reference/idun_agent_engine/observability/phoenix/#idun_agent_engine.observability.phoenix.PhoenixHandler","title":"<code>PhoenixHandler(options: dict[str, Any] | None = None)</code>","text":"<p>               Bases: <code>ObservabilityHandlerBase</code></p> <p>Phoenix handler configuring OpenTelemetry and LangChain instrumentation.</p> <p>Initialize handler, resolving env and setting up instrumentation.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/phoenix/phoenix_handler.py</code> <pre><code>def __init__(self, options: dict[str, Any] | None = None):\n    \"\"\"Initialize handler, resolving env and setting up instrumentation.\"\"\"\n    super().__init__(options)\n    opts = self.options\n\n    # Resolve and set env vars as required by Phoenix\n    api_key = self._resolve_env(opts.get(\"api_key\")) or os.getenv(\"PHOENIX_API_KEY\")\n    collector = (\n        self._resolve_env(opts.get(\"collector\"))\n        or self._resolve_env(opts.get(\"collector_endpoint\"))\n        or os.getenv(\"PHOENIX_COLLECTOR_ENDPOINT\")\n    )\n    self.project_name: str = opts.get(\"project_name\") or \"default\"\n\n    if api_key:\n        os.environ[\"PHOENIX_API_KEY\"] = api_key\n    if collector:\n        os.environ[\"PHOENIX_COLLECTOR_ENDPOINT\"] = collector\n\n    # Some older Phoenix deployments (before 2025-06-24) require setting client headers.\n    # If not explicitly provided, set it from API key when available for backward compatibility.\n    client_headers = opts.get(\"client_headers\")\n    if isinstance(client_headers, str) and client_headers:\n        os.environ[\"PHOENIX_CLIENT_HEADERS\"] = client_headers\n    elif api_key and not os.getenv(\"PHOENIX_CLIENT_HEADERS\"):\n        os.environ[\"PHOENIX_CLIENT_HEADERS\"] = f\"api_key={api_key}\"\n\n    # Configure tracer provider using phoenix.otel.register\n    self._callbacks: list[Any] = []\n    try:\n        from openinference.instrumentation.langchain import LangChainInstrumentor\n        from phoenix.otel import register  # type: ignore\n\n        tracer_provider = register(\n            project_name=self.project_name, auto_instrument=True\n        )\n        LangChainInstrumentor().instrument(tracer_provider=tracer_provider)\n    except Exception:\n        # Silent failure; user may not have phoenix installed\n        pass\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/phoenix/#idun_agent_engine.observability.phoenix.PhoenixHandler.get_callbacks","title":"<code>get_callbacks() -&gt; list[Any]</code>","text":"<p>Return callbacks (Phoenix instruments globally; this may be empty).</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/phoenix/phoenix_handler.py</code> <pre><code>def get_callbacks(self) -&gt; list[Any]:\n    \"\"\"Return callbacks (Phoenix instruments globally; this may be empty).\"\"\"\n    return self._callbacks\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/phoenix/#idun_agent_engine.observability.phoenix.PhoenixHandler.get_run_name","title":"<code>get_run_name() -&gt; str | None</code>","text":"<p>Optional run name used by frameworks that support it.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/base.py</code> <pre><code>def get_run_name(self) -&gt; str | None:\n    \"\"\"Optional run name used by frameworks that support it.\"\"\"\n    run_name = self.options.get(\"run_name\")\n    return run_name if isinstance(run_name, str) else None\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/phoenix/phoenix_handler/","title":"idun_agent_engine.observability.phoenix.phoenix_handler","text":""},{"location":"reference/idun_agent_engine/observability/phoenix/phoenix_handler/#idun_agent_engine.observability.phoenix.phoenix_handler","title":"<code>idun_agent_engine.observability.phoenix.phoenix_handler</code>","text":"<p>Phoenix observability handler implementation.</p>"},{"location":"reference/idun_agent_engine/observability/phoenix/phoenix_handler/#idun_agent_engine.observability.phoenix.phoenix_handler.PhoenixHandler","title":"<code>PhoenixHandler(options: dict[str, Any] | None = None)</code>","text":"<p>               Bases: <code>ObservabilityHandlerBase</code></p> <p>Phoenix handler configuring OpenTelemetry and LangChain instrumentation.</p> <p>Initialize handler, resolving env and setting up instrumentation.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/phoenix/phoenix_handler.py</code> <pre><code>def __init__(self, options: dict[str, Any] | None = None):\n    \"\"\"Initialize handler, resolving env and setting up instrumentation.\"\"\"\n    super().__init__(options)\n    opts = self.options\n\n    # Resolve and set env vars as required by Phoenix\n    api_key = self._resolve_env(opts.get(\"api_key\")) or os.getenv(\"PHOENIX_API_KEY\")\n    collector = (\n        self._resolve_env(opts.get(\"collector\"))\n        or self._resolve_env(opts.get(\"collector_endpoint\"))\n        or os.getenv(\"PHOENIX_COLLECTOR_ENDPOINT\")\n    )\n    self.project_name: str = opts.get(\"project_name\") or \"default\"\n\n    if api_key:\n        os.environ[\"PHOENIX_API_KEY\"] = api_key\n    if collector:\n        os.environ[\"PHOENIX_COLLECTOR_ENDPOINT\"] = collector\n\n    # Some older Phoenix deployments (before 2025-06-24) require setting client headers.\n    # If not explicitly provided, set it from API key when available for backward compatibility.\n    client_headers = opts.get(\"client_headers\")\n    if isinstance(client_headers, str) and client_headers:\n        os.environ[\"PHOENIX_CLIENT_HEADERS\"] = client_headers\n    elif api_key and not os.getenv(\"PHOENIX_CLIENT_HEADERS\"):\n        os.environ[\"PHOENIX_CLIENT_HEADERS\"] = f\"api_key={api_key}\"\n\n    # Configure tracer provider using phoenix.otel.register\n    self._callbacks: list[Any] = []\n    try:\n        from openinference.instrumentation.langchain import LangChainInstrumentor\n        from phoenix.otel import register  # type: ignore\n\n        tracer_provider = register(\n            project_name=self.project_name, auto_instrument=True\n        )\n        LangChainInstrumentor().instrument(tracer_provider=tracer_provider)\n    except Exception:\n        # Silent failure; user may not have phoenix installed\n        pass\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/phoenix/phoenix_handler/#idun_agent_engine.observability.phoenix.phoenix_handler.PhoenixHandler.get_callbacks","title":"<code>get_callbacks() -&gt; list[Any]</code>","text":"<p>Return callbacks (Phoenix instruments globally; this may be empty).</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/phoenix/phoenix_handler.py</code> <pre><code>def get_callbacks(self) -&gt; list[Any]:\n    \"\"\"Return callbacks (Phoenix instruments globally; this may be empty).\"\"\"\n    return self._callbacks\n</code></pre>"},{"location":"reference/idun_agent_engine/observability/phoenix/phoenix_handler/#idun_agent_engine.observability.phoenix.phoenix_handler.PhoenixHandler.get_run_name","title":"<code>get_run_name() -&gt; str | None</code>","text":"<p>Optional run name used by frameworks that support it.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/observability/base.py</code> <pre><code>def get_run_name(self) -&gt; str | None:\n    \"\"\"Optional run name used by frameworks that support it.\"\"\"\n    run_name = self.options.get(\"run_name\")\n    return run_name if isinstance(run_name, str) else None\n</code></pre>"},{"location":"reference/idun_agent_engine/server/","title":"idun_agent_engine.server","text":""},{"location":"reference/idun_agent_engine/server/#idun_agent_engine.server","title":"<code>idun_agent_engine.server</code>","text":"<p>Server package for FastAPI app components and configuration.</p>"},{"location":"reference/idun_agent_engine/server/dependencies/","title":"idun_agent_engine.server.dependencies","text":""},{"location":"reference/idun_agent_engine/server/dependencies/#idun_agent_engine.server.dependencies","title":"<code>idun_agent_engine.server.dependencies</code>","text":"<p>Dependency injection helpers for FastAPI routes.</p>"},{"location":"reference/idun_agent_engine/server/dependencies/#idun_agent_engine.server.dependencies.get_agent","title":"<code>get_agent(request: Request)</code>  <code>async</code>","text":"<p>Return the pre-initialized agent instance from the app state.</p> <p>Falls back to loading from the default config if not present (e.g., tests).</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/server/dependencies.py</code> <pre><code>async def get_agent(request: Request):\n    \"\"\"Return the pre-initialized agent instance from the app state.\n\n    Falls back to loading from the default config if not present (e.g., tests).\n    \"\"\"\n    if hasattr(request.app.state, \"agent\"):\n        return request.app.state.agent\n    else:\n        # This is a fallback for cases where the lifespan event did not run,\n        # like in some testing scenarios.\n        # Consider logging a warning here.\n        print(\"\u26a0\ufe0f  Agent not found in app state, initializing fallback agent...\")\n\n        app_config = ConfigBuilder.load_from_file()\n        agent = await ConfigBuilder.initialize_agent_from_config(app_config)\n        return agent\n</code></pre>"},{"location":"reference/idun_agent_engine/server/lifespan/","title":"idun_agent_engine.server.lifespan","text":""},{"location":"reference/idun_agent_engine/server/lifespan/#idun_agent_engine.server.lifespan","title":"<code>idun_agent_engine.server.lifespan</code>","text":"<p>Server lifespan management utilities.</p> <p>Initializes the agent at startup and cleans up resources on shutdown.</p>"},{"location":"reference/idun_agent_engine/server/lifespan/#idun_agent_engine.server.lifespan.lifespan","title":"<code>lifespan(app: FastAPI)</code>  <code>async</code>","text":"<p>FastAPI lifespan context to initialize and teardown the agent.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/server/lifespan.py</code> <pre><code>@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    \"\"\"FastAPI lifespan context to initialize and teardown the agent.\"\"\"\n    # Load config and initialize agent on startup\n    print(\"Server starting up...\")\n    engine_config = app.state.engine_config\n\n    # Use ConfigBuilder's centralized agent initialization\n    agent_instance = await ConfigBuilder.initialize_agent_from_config(engine_config)\n\n    # Store both in app state\n    app.state.agent = agent_instance\n    app.state.config = engine_config\n\n    agent_name = getattr(agent_instance, \"name\", \"Unknown\")\n    print(f\"\u2705 Agent '{agent_name}' initialized and ready to serve!\")\n\n    yield\n\n    # Clean up on shutdown\n    print(\"\ud83d\udd04 Idun Agent Engine shutting down...\")\n    agent = getattr(app.state, \"agent\", None)\n    if agent is not None:\n        close_fn = getattr(agent, \"close\", None)\n        if callable(close_fn):\n            result = close_fn()\n            if inspect.isawaitable(result):\n                await result\n    print(\"\u2705 Agent resources cleaned up successfully.\")\n</code></pre>"},{"location":"reference/idun_agent_engine/server/server_config/","title":"idun_agent_engine.server.server_config","text":""},{"location":"reference/idun_agent_engine/server/server_config/#idun_agent_engine.server.server_config","title":"<code>idun_agent_engine.server.server_config</code>","text":"<p>Server configuration models.</p>"},{"location":"reference/idun_agent_engine/server/server_config/#idun_agent_engine.server.server_config.ServerAPIConfig","title":"<code>ServerAPIConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>API server configuration.</p> <p>Attributes:</p> Name Type Description <code>port</code> <code>int</code> <p>Port where the HTTP server will bind.</p>"},{"location":"reference/idun_agent_engine/server/server_config/#idun_agent_engine.server.server_config.ServerConfig","title":"<code>ServerConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for the Engine's universal settings.</p>"},{"location":"reference/idun_agent_engine/server/routers/","title":"idun_agent_engine.server.routers","text":""},{"location":"reference/idun_agent_engine/server/routers/#idun_agent_engine.server.routers","title":"<code>idun_agent_engine.server.routers</code>","text":"<p>FastAPI routers for the engine service.</p>"},{"location":"reference/idun_agent_engine/server/routers/agent/","title":"idun_agent_engine.server.routers.agent","text":""},{"location":"reference/idun_agent_engine/server/routers/agent/#idun_agent_engine.server.routers.agent","title":"<code>idun_agent_engine.server.routers.agent</code>","text":"<p>Agent routes for invoking and streaming agent responses.</p>"},{"location":"reference/idun_agent_engine/server/routers/agent/#idun_agent_engine.server.routers.agent.ChatRequest","title":"<code>ChatRequest</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Chat request payload for agent endpoints.</p>"},{"location":"reference/idun_agent_engine/server/routers/agent/#idun_agent_engine.server.routers.agent.ChatResponse","title":"<code>ChatResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Chat response payload containing session and response text.</p>"},{"location":"reference/idun_agent_engine/server/routers/agent/#idun_agent_engine.server.routers.agent.invoke","title":"<code>invoke(request: ChatRequest, agent: Annotated[BaseAgent, Depends(get_agent)])</code>  <code>async</code>","text":"<p>Process a chat message with the agent without streaming.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/server/routers/agent.py</code> <pre><code>@agent_router.post(\"/invoke\", response_model=ChatResponse)\nasync def invoke(\n    request: ChatRequest,\n    agent: Annotated[BaseAgent, Depends(get_agent)],\n):\n    \"\"\"Process a chat message with the agent without streaming.\"\"\"\n    try:\n        message = {\"query\": request.query, \"session_id\": request.session_id}\n        response_content = await agent.invoke(message)\n\n        return ChatResponse(session_id=request.session_id, response=response_content)\n    except Exception as e:  # noqa: BLE001\n        raise HTTPException(status_code=500, detail=str(e)) from e\n</code></pre>"},{"location":"reference/idun_agent_engine/server/routers/agent/#idun_agent_engine.server.routers.agent.stream","title":"<code>stream(request: ChatRequest, agent: Annotated[BaseAgent, Depends(get_agent)])</code>  <code>async</code>","text":"<p>Process a message with the agent, streaming ag-ui events.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/server/routers/agent.py</code> <pre><code>@agent_router.post(\"/stream\")\nasync def stream(\n    request: ChatRequest,\n    agent: Annotated[BaseAgent, Depends(get_agent)],\n):\n    \"\"\"Process a message with the agent, streaming ag-ui events.\"\"\"\n    try:\n\n        async def event_stream():\n            message = {\"query\": request.query, \"session_id\": request.session_id}\n            async for event in agent.stream(message):\n                yield f\"data: {event.model_dump_json()}\\n\\n\"\n\n        return StreamingResponse(event_stream(), media_type=\"text/event-stream\")\n    except Exception as e:  # noqa: BLE001\n        raise HTTPException(status_code=500, detail=str(e)) from e\n</code></pre>"},{"location":"reference/idun_agent_engine/server/routers/base/","title":"idun_agent_engine.server.routers.base","text":""},{"location":"reference/idun_agent_engine/server/routers/base/#idun_agent_engine.server.routers.base","title":"<code>idun_agent_engine.server.routers.base</code>","text":"<p>Base routes for service health and landing info.</p>"},{"location":"reference/idun_agent_engine/server/routers/base/#idun_agent_engine.server.routers.base.health_check","title":"<code>health_check()</code>","text":"<p>Health check endpoint for monitoring and load balancers.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/server/routers/base.py</code> <pre><code>@base_router.get(\"/health\")\ndef health_check():\n    \"\"\"Health check endpoint for monitoring and load balancers.\"\"\"\n    return {\"status\": \"healthy\", \"engine_version\": __version__}\n</code></pre>"},{"location":"reference/idun_agent_engine/server/routers/base/#idun_agent_engine.server.routers.base.read_root","title":"<code>read_root()</code>","text":"<p>Root endpoint with basic information about the service.</p> Source code in <code>libs/idun_agent_engine/src/idun_agent_engine/server/routers/base.py</code> <pre><code>@base_router.get(\"/\")\ndef read_root():\n    \"\"\"Root endpoint with basic information about the service.\"\"\"\n    return {\n        \"message\": \"Welcome to your Idun Agent Engine server!\",\n        \"docs\": \"/docs\",\n        \"health\": \"/health\",\n        \"agent_endpoints\": {\"invoke\": \"/agent/invoke\", \"stream\": \"/agent/stream\"},\n    }\n</code></pre>"}]}